[ { "title": "数据库：脏读、幻读和不可重复读", "url": "/HYCBlog/posts/web-database-bad-Read/", "categories": "Blogging, database", "tags": "web", "date": "2020-09-06 09:36:00 +0800", "snippet": "脏读、幻读、不可重复读数据库事务的特征 A Atomicity 原子性事务是一个原子性质的操作单元，事务里面对数据库的操作要么都执行，要么都不执行。 C Consistent 一致性在事务开始之前和完成之后，数据库都必须保持一致状态，必须保证数据库的完整性。拿转账来说，假设用户A和用户B两者的钱加起来一共是5000，那么不管A和B之间如何转账，转几次账，事务结束后两个用户的钱相加起来应该还得是5000，这就是事务的一致性。 I Isolation 隔离性数据库允许多个并发事务同时对数据进行操作，隔离性保证各个事务相互独立，一个事务处理的中间状态对其他事务是不可见的。 D Dura..." }, { "title": "Spring：声明式事务控制", "url": "/HYCBlog/posts/web-javaweb-spring_7/", "categories": "Blogging, javaweb", "tags": "web", "date": "2020-09-05 21:44:00 +0800", "snippet": "基于XML 配置事务管理器 配置事务的通知 此时需要导入事务的约束：tx和aop名称空间和约束 使用tx:advice标签配置事务通知 ​ 属性： ​ id：给事务通知起一个唯一标识 ​ transaction-manager：给事务通知提供一个事务管理器引用 配置AOP中的通用切入点表达式 建立事务通知和切入点表达式的对应关系 配置事务的属性 在事务的通知tx:advice标签内部配置 ​ isolation：指定事务的隔离级别，默认值为default，表示使用数据库的默认隔..." }, { "title": "Spring：Spring中的JdbcTemplate", "url": "/HYCBlog/posts/web-javaweb-spring_6/", "categories": "Blogging, javaweb", "tags": "web", "date": "2020-09-05 21:43:00 +0800", "snippet": "概述是Spring框架中提供的一个对象，是对原始Jdbc API对象的简单封装。Spring框架为我们提供了很多的操作模版类。* 操作关系型数据的： JdbcTemplate HibernateTemplate* 操作nosql数据库的： RedisTemplate* 操作消息队列的： JmsTemplateJdbcTemplate实现CRUD操作Account的封装策略Spring以帮我们写好BeanPropertyRowMapper&amp;lt;Account&amp;gt;(Account.class)，无需自己实现package com.yucaihuang.jdbcT..." }, { "title": "Spring：AOP（面向切面编程）", "url": "/HYCBlog/posts/web-javaweb-spring_5/", "categories": "Blogging, javaweb", "tags": "web", "date": "2020-09-05 21:42:00 +0800", "snippet": "使用AOP降低程序耦合，提高可重用性和效率AOP：Aspect Oriented Programming，意为面向切面编程，通过预编译方式和运行期动态代理实现程序功能的统一维护的一种技术。利用AOP可以对业务逻辑的各个部分进行隔离，从而使得业务逻辑各部分之间的耦合度降低，提高程序的可重用性，同时提高了开发效率。简单的说，就是AOP把程序中重复的代码抽取出来，在需要执行的时候，使用动态代理的技术，在不修改源码的基础上，对已有的方法进行增强。事务控制下的转账功能实现定义和事物管理相关的工具类：/** * 和事务管理相关的工具类，它包含了：开启事务，提交事务，回滚事务和释放连接 */@Comp..." }, { "title": "Spring：IOC（控制反转）", "url": "/HYCBlog/posts/web-javaweb-spring_4/", "categories": "Blogging, javaweb", "tags": "web", "date": "2020-09-05 21:41:00 +0800", "snippet": "使用spring的IOC降低程序耦合IoC把创建对象的权利交给框架。它包括依赖注入（Dependency Injection）和依赖查找（Dependency Lookup）。作用：削减计算机程序的耦合（解除代码中的依赖关系）spring基于xml的IOC环境搭建和入门在pom.xml中导入坐标： &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.springframework&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;sp..." }, { "title": "Spring：工厂模式解耦", "url": "/HYCBlog/posts/web-javaweb-spring_3/", "categories": "Blogging, javaweb", "tags": "web", "date": "2020-09-05 21:40:00 +0800", "snippet": "问题代码IAccountDao.java:/** * 账户的持久层接口 */public interface IAccountDao { void saveAccount();}AccountDaoImpl.java:/** * 账户的持久层实现类 */public class AccountDaoImpl implements IAccountDao { public void saveAccount() { System.out.println(&quot;账户已保存&quot;); }}IAccountService.java:/** * 账户业务层..." }, { "title": "Spring：程序的耦合", "url": "/HYCBlog/posts/web-javaweb-spring_2/", "categories": "Blogging, javaweb", "tags": "web", "date": "2020-09-05 21:39:00 +0800", "snippet": " 程序的耦合和解耦思路 package com.yucaihuang.jdbc; import java.sql.*; /** * 程序耦合 * 耦合：程序间的依赖关系，包括：类之间的依赖、方法间的依赖 * 解耦：降低程序间的依赖关系 * 实际开发中，应该做到：编译期不依赖，运行时才依赖 * 解耦的思路： * 第一步：使用反射来创建对象，而避免使用new关键字 * 第二步：通过读取配置文件，来获取要创建的对象的全限定类名 */public class JdbcDemo1 { public static void main(String..." }, { "title": "Spring：概述", "url": "/HYCBlog/posts/web-javaweb-spring_1/", "categories": "Blogging, javaweb", "tags": "web", "date": "2020-09-05 21:38:00 +0800", "snippet": "Spring是分层的Java SE/EE应用full-stack轻量级开源框架，以IoC（Inverse Of Control: 反转控制）和AOP（Aspect Oriented Programming: 面向切面编程）为内核，提供了展现层Spring MVC和持久层Spring JDBC以及业务层事务管理等众多的企业级应用技术，还能整合开源世界众多著名的第三方框架和类库。Spring的优势1. 方便接耦，简化开发2. AOP 编程的支持3. 声明式事务的支持4. 方便程序的测试5. 方便程序的测试6. 方便集成各种优秀框架7. 降低JavaEE API的使用难度8. 源码是经典学习范..." }, { "title": "Manacher算法：线性时间内找到最大回文子串", "url": "/HYCBlog/posts/algorithm-manacher/", "categories": "Blogging, leetcode", "tags": "算法题解", "date": "2020-08-29 13:49:00 +0800", "snippet": "5.最长回文子串给定一个字符串 s，找到 s 中最长的回文子串。你可以假设 s 的最大长度为 1000。示例 1：输入: &quot;babad&quot;输出: &quot;bab&quot;注意: &quot;aba&quot; 也是一个有效答案。示例 2：输入: &quot;cbbd&quot;输出: &quot;bb&quot;求解这个问题的方法有很多：动态规划、中心扩散、KMP等。今天主要分析Manacher算法。Manacher算法本质上还是中心扩散法，但是它使用了类似于KMP算法的技巧，可以减少重复判断。第一步：添加分隔符对原始字符串进行预处理，在首尾以及每个字符之间插入分..." }, { "title": "从算法到源码：PriorityQueue源码学习", "url": "/HYCBlog/posts/priority-queue-src-code-analyze/", "categories": "Blogging, 容器", "tags": "Java源码学习", "date": "2020-08-28 21:03:00 +0800", "snippet": "剑指 Offer 41. 数据流中的中位数如何得到一个数据流中的中位数？如果从数据流中读出奇数个数值，那么中位数就是所有数值排序之后位于中间的数值。如果从数据流中读出偶数个数值，那么中位数就是所有数值排序之后中间两个数的平均值。例如，[2,3,4] 的中位数是 3[2,3] 的中位数是 (2 + 3) / 2 = 2.5设计一个支持以下两种操作的数据结构： void addNum(int num) - 从数据流中添加一个整数到数据结构中。 double findMedian() - 返回目前所有元素的中位数。示例 1：输入：[&quot;MedianFinder&quot;,&quo..." }, { "title": "centOS误删系统自带python", "url": "/HYCBlog/posts/web-delete-system-python-in-centos/", "categories": "Blogging, web", "tags": "web", "date": "2020-08-26 21:14:00 +0800", "snippet": "解决centOS误删系统自带python后，yum不可用的问题前几天手贱，为了装python3把系统自带的2.7给删了，今天才发现yum用不了了…报如下错误：上网查了发现，是因为yum依赖了系统自带的python，于是我就去找了2.7.5的python包，安装了之后还是报上面的错…试着在2.7.5下import yum，发现不存在这个模块。所以只能去下载源码包安装了。第一步首先卸载python:rpm -qa|grep python|xargs rpm -e --allmatches --nodepswhereis python|xargs rm -fr再卸载yum:rpm -qa|gr..." }, { "title": "内网渗透：记一次局域网arp劫持测试", "url": "/HYCBlog/posts/security-arp-hijack/", "categories": "Blogging, kali内网渗透", "tags": "security", "date": "2020-08-25 20:40:00 +0800", "snippet": "攻击前准备： 一台Kali虚拟机作为attacker 一台win7虚拟机作为victim win7虚拟机开桥接模式，模拟以太网连接。 用到的主要命令： arpspoofdriftnet Step1：扫描局域网内主机netdiscover -r 192.168.199.0/24 #扫描范围观察结果，推断出网关IP为192.168.199.1，目标主机地址为192.168.199.169。具体如何推断出目标主机的IP，可以从电脑型号以及当前的活跃情况推断。其实大多数attacker不会在乎自己攻击的是哪个特定主机，会在能力范..." }, { "title": "2020秋招企业笔试题", "url": "/HYCBlog/posts/enterprise-test/", "categories": "Blogging, 企业笔试", "tags": "算法题解", "date": "2020-08-24 21:10:00 +0800", "snippet": "京东-2020-8-6统计在N到M之间的回文素数有多少个0&amp;lt;=N&amp;lt;M&amp;lt;=1000000把在N和M之间的数去掉一个数字后，是否还是回文素数？是的话统计它的总数解法import java.util.Scanner;public class Main { final static int maxn = 1000000 + 10; // 素数 static boolean[] isp = new boolean[maxn]; static int[] pow = new int[10]; static void init()..." }, { "title": "URL包含中文，请求资源404", "url": "/HYCBlog/posts/web-url-with-chinese-string/", "categories": "Blogging, web", "tags": "web", "date": "2020-08-24 15:40:00 +0800", "snippet": "在本地时，项目路径内，中文解析均正确。但是放到服务器上后，http请求解析出现乱码。如下：当url路径包含中文的时候，浏览器会自动采用UTF-8对路径进行编码，而服务器（本例中是tomcat，不同服务器的实际可能有差异，但原理差不多）默认是采用ISO-8859-1来对url路径进行解码，此时往往会出现404，如以上例子所述。所以需要在服务端的配置文件中指定编码： 在tomcat中配置，server.xml设置URIEncoding=”UTF-8” &amp;lt;Connector connectionTimeout=&quot;20000&quot; port=&quo..." }, { "title": "剑指offer题解", "url": "/HYCBlog/posts/point-to-offers/", "categories": "Blogging, 剑指offer", "tags": "算法题解", "date": "2020-08-24 15:00:00 +0800", "snippet": "剑指 Offer 03. 数组中重复的数字找出数组中重复的数字。在一个长度为 n 的数组 nums 里的所有数字都在 0～n-1 的范围内。数组中某些数字是重复的，但不知道有几个数字重复了，也不知道每个数字重复了几次。请找出数组中任意一个重复的数字。示例 1：输入：[2, 3, 1, 0, 2, 5, 3]输出：2 或 3 限制：2 &amp;lt;= n &amp;lt;= 100000###集合class Solution { public int findRepeatNumber(int[] nums) { Set&amp;lt;Integer&amp;gt; ..." }, { "title": "Leetcode题解", "url": "/HYCBlog/posts/leetcode-solutions/", "categories": "Blogging, leetcode", "tags": "算法题解", "date": "2020-08-23 20:44:00 +0800", "snippet": "目录5.最长回文子串16.最接近三数之和17.电话号码的字母组合43.字符串相乘51.N 皇后60.第k个排列#63.含障碍物网格中的不同路径67.二进制求和93. 恢复IP地址96. 不同的二叉搜索树100. 相同的树107.二叉树的层次遍历 II108. 将有序数组转换为二叉搜索树109. 有序链表转换二叉搜索树110.平衡二叉树111. 二叉树的最小深度112. 路径总和120.三角形最小路径和130.被围绕的区域133.克隆图139.单词拆分201.数字范围按位与209.寻找长度最小的子数组214.最短回文串215.数组中的第K大元素257.二叉树的所有路径309.最佳买卖股票..." } ]

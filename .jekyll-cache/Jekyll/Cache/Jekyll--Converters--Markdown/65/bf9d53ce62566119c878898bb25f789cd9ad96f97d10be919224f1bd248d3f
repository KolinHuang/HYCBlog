I".]<p>[TOC]</p>

<h2 id="京东-2020-8-6">京东-2020-8-6</h2>

<h3 id="统计在n到m之间的回文素数有多少个">统计在N到M之间的回文素数有多少个</h3>

<p>0&lt;=N&lt;M&lt;=1000000</p>

<p>把在N和M之间的数去掉一个数字后，是否还是回文素数？</p>

<p>是的话统计它的总数</p>

<h4 id="解法">解法</h4>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
</pre></td><td class="rouge-code"><pre><span class="kn">import</span> <span class="nn">java.util.Scanner</span><span class="o">;</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Main</span> <span class="o">{</span>
    <span class="kd">final</span> <span class="kd">static</span> <span class="kt">int</span> <span class="n">maxn</span> <span class="o">=</span> <span class="mi">1000000</span> <span class="o">+</span> <span class="mi">10</span><span class="o">;</span>
    <span class="c1">// 素数</span>
    <span class="kd">static</span> <span class="kt">boolean</span><span class="o">[]</span> <span class="n">isp</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">boolean</span><span class="o">[</span><span class="n">maxn</span><span class="o">];</span>
    <span class="kd">static</span> <span class="kt">int</span><span class="o">[]</span> <span class="n">pow</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="mi">10</span><span class="o">];</span>
    <span class="kd">static</span> <span class="kt">void</span> <span class="nf">init</span><span class="o">()</span> <span class="o">{</span>
        <span class="c1">// 打表，备忘录，全部初始化给 false</span>
        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">maxn</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="n">isp</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
        <span class="o">}</span>
        <span class="n">isp</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>
        <span class="n">isp</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>

        <span class="c1">// 素数的倍数就不是素数，一并处理</span>
        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">2</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">maxn</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="k">if</span> <span class="o">(</span><span class="n">isp</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">==</span> <span class="kc">true</span><span class="o">)</span> <span class="o">{</span>
                <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="n">i</span> <span class="o">+</span> <span class="n">i</span><span class="o">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">maxn</span><span class="o">;</span> <span class="n">j</span> <span class="o">+=</span> <span class="n">i</span><span class="o">)</span> <span class="o">{</span>
                    <span class="n">isp</span><span class="o">[</span><span class="n">j</span><span class="o">]</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>
                <span class="o">}</span>
            <span class="o">}</span>
          	
        <span class="o">}</span>
      
      	
      	
      
      	<span class="c1">//设置除数1,10,100,...,1000000用于抠数</span>
        <span class="n">pow</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span>
        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">8</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="n">pow</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="n">pow</span><span class="o">[</span><span class="n">i</span> <span class="o">-</span> <span class="mi">1</span><span class="o">]</span> <span class="o">*</span> <span class="mi">10</span><span class="o">;</span>
        <span class="o">}</span>
    <span class="o">}</span>
    <span class="c1">// 扣掉某个位置的数</span>
    <span class="kd">static</span> <span class="kt">int</span> <span class="nf">solve</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">,</span> <span class="kt">int</span> <span class="n">j</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// 123456 要扣掉 4 即 i = 2的时候，pow = 100，12356 = (56 = 123456 % 100) + (12300 = 123456 / 1000 * 100)</span>
        <span class="kt">int</span> <span class="n">ans</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
        <span class="n">ans</span> <span class="o">+=</span> <span class="n">i</span> <span class="o">%</span> <span class="n">pow</span><span class="o">[</span><span class="n">j</span><span class="o">];</span>
        <span class="n">ans</span> <span class="o">+=</span> <span class="n">i</span> <span class="o">/</span> <span class="n">pow</span><span class="o">[</span><span class="n">j</span> <span class="o">+</span> <span class="mi">1</span><span class="o">]</span> <span class="o">*</span> <span class="n">pow</span><span class="o">[</span><span class="n">j</span><span class="o">];</span>
        <span class="k">return</span> <span class="n">ans</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="c1">// 回文检测，将数字转换为字符数组，双指针遍历</span>
    <span class="kd">static</span> <span class="kt">boolean</span> <span class="nf">isr</span><span class="o">(</span><span class="nc">String</span> <span class="n">num</span><span class="o">)</span> <span class="o">{</span>
        <span class="kt">boolean</span> <span class="n">res</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
        <span class="kt">int</span> <span class="n">length</span> <span class="o">=</span> <span class="n">num</span><span class="o">.</span><span class="na">length</span><span class="o">();</span>
      
      	<span class="c1">//偶数长度的回文数中，除了11都不是素数</span>
      	<span class="k">if</span><span class="o">(</span><span class="n">num</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="s">"11"</span><span class="o">))</span>
          	<span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
      	<span class="k">if</span><span class="o">(</span><span class="n">length</span> <span class="o">%</span> <span class="mi">2</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span>
          	<span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
      
      
        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">length</span> <span class="o">/</span> <span class="mi">2</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="k">if</span> <span class="o">(</span><span class="n">num</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">i</span><span class="o">)</span> <span class="o">!=</span> <span class="n">num</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">length</span> <span class="o">-</span> <span class="n">i</span> <span class="o">-</span> <span class="mi">1</span><span class="o">))</span> <span class="o">{</span>
                <span class="n">res</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>
                <span class="k">break</span><span class="o">;</span>
            <span class="o">}</span>
        <span class="o">}</span>
        <span class="k">return</span> <span class="n">res</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">init</span><span class="o">();</span>
        <span class="kt">int</span> <span class="n">n</span><span class="o">,</span> <span class="n">m</span><span class="o">;</span>
        <span class="nc">Scanner</span> <span class="n">sc</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Scanner</span><span class="o">(</span><span class="nc">System</span><span class="o">.</span><span class="na">in</span><span class="o">);</span>
        <span class="n">n</span> <span class="o">=</span> <span class="n">sc</span><span class="o">.</span><span class="na">nextInt</span><span class="o">();</span>
        <span class="n">m</span> <span class="o">=</span> <span class="n">sc</span><span class="o">.</span><span class="na">nextInt</span><span class="o">();</span>
        <span class="kt">int</span> <span class="n">ans</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">n</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;=</span> <span class="n">m</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="c1">// 长度</span>
            <span class="kt">int</span> <span class="n">length</span> <span class="o">=</span> <span class="nc">String</span><span class="o">.</span><span class="na">valueOf</span><span class="o">(</span><span class="n">i</span><span class="o">).</span><span class="na">length</span><span class="o">();</span>
            <span class="c1">// 从 最后一个位置开始扣</span>
            <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">length</span><span class="o">;</span> <span class="n">j</span><span class="o">++)</span> <span class="o">{</span>
                <span class="kt">int</span> <span class="n">buf</span> <span class="o">=</span> <span class="n">solve</span><span class="o">(</span><span class="n">i</span><span class="o">,</span> <span class="n">j</span><span class="o">);</span>
                <span class="c1">// 处理后的数既要是素数也要是回文</span>
                <span class="k">if</span> <span class="o">(</span><span class="n">isp</span><span class="o">[</span><span class="n">buf</span><span class="o">]</span> <span class="o">&amp;&amp;</span> <span class="n">isr</span><span class="o">(</span><span class="nc">String</span><span class="o">.</span><span class="na">valueOf</span><span class="o">(</span><span class="n">buf</span><span class="o">)))</span> <span class="o">{</span>
                    <span class="n">ans</span><span class="o">++;</span>
                    <span class="k">break</span><span class="o">;</span>
                <span class="o">}</span>
            <span class="o">}</span>
        <span class="o">}</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">ans</span><span class="o">);</span>
        <span class="n">sc</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h4 id="回文数和素数的若干规律">回文数和素数的若干规律</h4>

<ul>
  <li>回文数的生成，可由类似这种公式来生成10001 * i + 1010 * j + 100 * k；</li>
  <li>判断n是否为素数，只需要考虑2到n的开平方后最大的整数之间的数是否能整除i就可以；</li>
  <li>数学结论：除了11以外，所有回文素数的位数都是奇数；</li>
  <li>从与N同位数的回文数开始遍历，列表解析式筛选出大于N-1的回文数；</li>
  <li>还有一个结论，所有大于3的素数都在6的倍数附近(6倍原理)，基于此结论可以编写最高效率的素数遍历</li>
</ul>

<h4 id="回文数的最优判别和统计">回文数的最优判别和统计</h4>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
</pre></td><td class="rouge-code"><pre><span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">isPalindrome</span><span class="o">(</span><span class="kt">int</span> <span class="n">x</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// 特殊情况：</span>
        <span class="c1">// 如上所述，当 x &lt; 0 时，x 不是回文数。</span>
        <span class="c1">// 同样地，如果数字的最后一位是 0，为了使该数字为回文，</span>
        <span class="c1">// 则其第一位数字也应该是 0</span>
        <span class="c1">// 只有 0 满足这一属性</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">x</span> <span class="o">&lt;</span> <span class="mi">0</span> <span class="o">||</span> <span class="o">(</span><span class="n">x</span> <span class="o">%</span> <span class="mi">10</span> <span class="o">==</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="n">x</span> <span class="o">!=</span> <span class="mi">0</span><span class="o">))</span> <span class="o">{</span>
            <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
        <span class="o">}</span>
        <span class="kt">int</span> <span class="n">revertedNumber</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
        <span class="k">while</span> <span class="o">(</span><span class="n">x</span> <span class="o">&gt;</span> <span class="n">revertedNumber</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">revertedNumber</span> <span class="o">=</span> <span class="n">revertedNumber</span> <span class="o">*</span> <span class="mi">10</span> <span class="o">+</span> <span class="n">x</span> <span class="o">%</span> <span class="mi">10</span><span class="o">;</span>
            <span class="n">x</span> <span class="o">/=</span> <span class="mi">10</span><span class="o">;</span>
        <span class="o">}</span>
        <span class="c1">// 当数字长度为奇数时，我们可以通过 revertedNumber/10 去除处于中位的数字。</span>
        <span class="c1">// 例如，当输入为 12321 时，在 while 循环的末尾我们可以得到 x = 12，revertedNumber = 123，</span>
        <span class="c1">// 由于处于中位的数字不影响回文（它总是与自己相等），所以我们可以简单地将其去除。</span>
        <span class="k">return</span> <span class="n">x</span> <span class="o">==</span> <span class="n">revertedNumber</span> <span class="o">||</span> <span class="n">x</span> <span class="o">==</span> <span class="n">revertedNumber</span> <span class="o">/</span> <span class="mi">10</span><span class="o">;</span>
    <span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h4 id="素数的最优判别和统计">素数的最优判别和统计</h4>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
</pre></td><td class="rouge-code"><pre><span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">isPrime</span><span class="o">(</span><span class="kt">int</span> <span class="no">N</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">if</span> <span class="o">(</span><span class="no">N</span> <span class="o">&lt;</span> <span class="mi">2</span><span class="o">)</span> <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
        <span class="kt">int</span> <span class="no">R</span> <span class="o">=</span> <span class="o">(</span><span class="kt">int</span><span class="o">)</span> <span class="nc">Math</span><span class="o">.</span><span class="na">sqrt</span><span class="o">(</span><span class="no">N</span><span class="o">);</span>
        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">d</span> <span class="o">=</span> <span class="mi">2</span><span class="o">;</span> <span class="n">d</span> <span class="o">&lt;=</span> <span class="no">R</span><span class="o">;</span> <span class="o">++</span><span class="n">d</span><span class="o">)</span>
            <span class="k">if</span> <span class="o">(</span><span class="no">N</span> <span class="o">%</span> <span class="n">d</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
        <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
<span class="o">}</span>

</pre></td></tr></tbody></table></code></pre></div></div>

<h2 id="华为-2020-8-12">华为-2020-8-12</h2>

<h3 id="1-购物管理">1. 购物管理</h3>

<p>在某咖啡店，每杯咖啡的售价为5元。</p>

<p>每位顾客只买一杯咖啡，客户支付面额为：5、10、20元。购物之后，根据面额给客户找钱。</p>

<p>开始备用零钱为0。</p>

<p>根据客户购买顺序，返回是否可以正确找零钱及当前客户顺序号。</p>

<p>说明：如果是能正确找零，则返回最后一个客户的顺序号，如果不能找零，则返回当前客户的顺序号；</p>

<p>客户编号从1开始；</p>

<p>约束：顾客数量限制在100以内；</p>

<p>输入描述：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre><span class="n">输入一串数字序列</span><span class="err">，</span><span class="n">表示每次顾客支付的金额</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>输出描述：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
</pre></td><td class="rouge-code"><pre><span class="n">输出</span><span class="err">：</span><span class="kc">true</span><span class="o">,</span><span class="n">顺序号或者false</span><span class="o">,</span><span class="n">顺序号</span>
<span class="n">若成功找零</span><span class="err">，</span><span class="n">则返回true</span><span class="o">,</span><span class="n">顺序号</span><span class="err">；</span><span class="n">否则返回false</span><span class="o">,</span><span class="n">顺序号</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>示例</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
</pre></td><td class="rouge-code"><pre><span class="n">输入</span><span class="err">：</span><span class="mi">5</span><span class="o">,</span><span class="mi">5</span><span class="o">,</span><span class="mi">5</span><span class="o">,</span><span class="mi">10</span>
<span class="n">输出</span><span class="err">：</span><span class="kc">true</span><span class="o">,</span><span class="mi">4</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>示例</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
</pre></td><td class="rouge-code"><pre><span class="n">输入</span><span class="err">：</span><span class="mi">10</span><span class="o">,</span><span class="mi">10</span>
<span class="n">输出</span><span class="err">：</span><span class="kc">false</span><span class="o">,</span><span class="mi">1</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
</pre></td><td class="rouge-code"><pre><span class="kn">import</span> <span class="nn">java.util.ArrayList</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.Arrays</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.List</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.Scanner</span><span class="o">;</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Main</span><span class="o">{</span>
    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">solution</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">nums</span><span class="o">){</span>
        <span class="k">if</span><span class="o">(</span><span class="n">nums</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="o">!=</span> <span class="mi">5</span><span class="o">)</span>
            <span class="k">return</span> <span class="s">"false,1"</span><span class="o">;</span>
        <span class="nc">List</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">list</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ArrayList</span><span class="o">&lt;&gt;();</span>
        <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">nums</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="o">++</span><span class="n">i</span><span class="o">){</span>
            <span class="k">if</span><span class="o">(</span><span class="n">nums</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">==</span> <span class="mi">5</span><span class="o">)</span>
                <span class="n">list</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">nums</span><span class="o">[</span><span class="n">i</span><span class="o">]);</span>
            <span class="k">else</span> <span class="o">{</span>
                <span class="kt">boolean</span> <span class="n">yes</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>
                <span class="k">for</span> <span class="o">(</span><span class="nc">Integer</span> <span class="n">integer</span> <span class="o">:</span> <span class="n">list</span><span class="o">)</span> <span class="o">{</span>
                    <span class="n">nums</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">-=</span> <span class="n">integer</span><span class="o">;</span>
                    <span class="k">if</span><span class="o">(</span><span class="n">nums</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span>
                        <span class="n">yes</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
                <span class="o">}</span>
                <span class="k">if</span><span class="o">(!</span><span class="n">yes</span><span class="o">)</span>
                    <span class="k">return</span> <span class="s">"false,"</span> <span class="o">+</span> <span class="o">(</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="o">);</span>
            <span class="o">}</span>
        <span class="o">}</span>
        <span class="k">return</span> <span class="s">"true,"</span><span class="o">+</span><span class="n">nums</span><span class="o">.</span><span class="na">length</span><span class="o">;</span>

    <span class="o">}</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">Scanner</span> <span class="n">input</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Scanner</span><span class="o">(</span><span class="nc">System</span><span class="o">.</span><span class="na">in</span><span class="o">);</span>
        <span class="nc">String</span><span class="o">[]</span> <span class="n">arr</span> <span class="o">=</span> <span class="n">input</span><span class="o">.</span><span class="na">nextLine</span><span class="o">().</span><span class="na">split</span><span class="o">(</span><span class="s">","</span><span class="o">);</span>

        <span class="kt">int</span><span class="o">[]</span> <span class="n">num</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="n">arr</span><span class="o">.</span><span class="na">length</span><span class="o">];</span>
        <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">arr</span><span class="o">.</span><span class="na">length</span><span class="o">;</span><span class="n">i</span><span class="o">++){</span>
            <span class="n">num</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">arr</span><span class="o">[</span><span class="n">i</span><span class="o">]);</span>
        <span class="o">}</span>
        <span class="nc">String</span> <span class="n">res</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Main</span><span class="o">().</span><span class="na">solution</span><span class="o">(</span><span class="n">num</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">res</span><span class="o">);</span>

    <span class="o">}</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h3 id="2-走地砖">2. 走地砖</h3>

<p>小明有一个爱好，走路喜欢踩在地砖格上，并且按照固定的步长走，某天，小明要通过以未完工的矩形路面，只有部分区域铺设了地砖格，尝试判断小明是否能够按照固定的步长N通过该区域。</p>

<p><strong>输入描述</strong></p>

<p>第一行为步长S（S&gt;0）</p>

<p>第二行为矩阵的行列M,N（0 &lt; M,N &lt;= 100）</p>

<p>第三行开始为矩阵输入，0表示没有地砖，1表示有地砖。</p>

<p>小明从左上角出发，到右下角。这两个点保证为1。</p>

<p><strong>输出描述</strong></p>

<p>可以通过返回1，否则返回0</p>

<h4 id="答案">答案</h4>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
</pre></td><td class="rouge-code"><pre><span class="kn">package</span> <span class="nn">test</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">java.awt.*</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.*</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.List</span><span class="o">;</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Main</span><span class="o">{</span>
    <span class="kt">int</span> <span class="n">row</span><span class="o">;</span>
    <span class="kt">int</span> <span class="n">col</span><span class="o">;</span>
    <span class="kt">int</span> <span class="n">step</span><span class="o">;</span>
    <span class="nc">Set</span><span class="o">&lt;</span><span class="nc">Point</span><span class="o">&gt;</span> <span class="n">visited</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">HashSet</span><span class="o">&lt;&gt;();</span>
    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">solution</span><span class="o">(</span><span class="kt">int</span><span class="o">[][]</span> <span class="n">nums</span><span class="o">,</span><span class="kt">int</span> <span class="no">S</span><span class="o">){</span>
        <span class="n">row</span> <span class="o">=</span> <span class="n">nums</span><span class="o">.</span><span class="na">length</span><span class="o">;</span>
        <span class="n">col</span> <span class="o">=</span> <span class="n">nums</span><span class="o">[</span><span class="mi">0</span><span class="o">].</span><span class="na">length</span><span class="o">;</span>
        <span class="n">step</span> <span class="o">=</span> <span class="no">S</span><span class="o">;</span>
        <span class="k">return</span> <span class="nf">dfs</span><span class="o">(</span><span class="n">nums</span><span class="o">,</span><span class="mi">0</span><span class="o">,</span><span class="mi">0</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="kt">int</span> <span class="nf">dfs</span><span class="o">(</span><span class="kt">int</span><span class="o">[][]</span> <span class="n">nums</span><span class="o">,</span> <span class="kt">int</span> <span class="n">x</span><span class="o">,</span> <span class="kt">int</span> <span class="n">y</span><span class="o">){</span>
        <span class="k">if</span><span class="o">(</span><span class="n">nums</span><span class="o">[</span><span class="n">x</span><span class="o">][</span><span class="n">y</span><span class="o">]</span> <span class="o">!=</span> <span class="mi">1</span><span class="o">)</span>
            <span class="k">return</span> <span class="mi">0</span><span class="o">;</span>
        <span class="k">if</span><span class="o">(</span><span class="n">x</span> <span class="o">==</span> <span class="n">row</span> <span class="o">-</span> <span class="mi">1</span> <span class="o">&amp;&amp;</span> <span class="n">y</span> <span class="o">==</span> <span class="n">col</span> <span class="o">-</span> <span class="mi">1</span><span class="o">)</span>
            <span class="k">return</span> <span class="mi">1</span><span class="o">;</span>
        <span class="n">visited</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="nc">Point</span><span class="o">(</span><span class="n">x</span><span class="o">,</span><span class="n">y</span><span class="o">));</span>
        <span class="kt">int</span> <span class="n">res</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
        <span class="k">if</span><span class="o">(</span><span class="n">x</span> <span class="o">-</span> <span class="n">step</span> <span class="o">&gt;=</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="n">visited</span><span class="o">.</span><span class="na">contains</span><span class="o">(</span><span class="k">new</span> <span class="nc">Point</span><span class="o">(</span><span class="n">x</span> <span class="o">-</span> <span class="n">step</span><span class="o">,</span><span class="n">y</span><span class="o">)))</span>
            <span class="n">res</span><span class="o">+=</span><span class="n">dfs</span><span class="o">(</span><span class="n">nums</span><span class="o">,</span><span class="n">x</span> <span class="o">-</span> <span class="n">step</span><span class="o">,</span><span class="n">y</span><span class="o">);</span>
        <span class="k">if</span><span class="o">(</span><span class="n">y</span> <span class="o">-</span> <span class="n">step</span> <span class="o">&gt;=</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="n">visited</span><span class="o">.</span><span class="na">contains</span><span class="o">(</span><span class="k">new</span> <span class="nc">Point</span><span class="o">(</span><span class="n">x</span><span class="o">,</span><span class="n">y</span><span class="o">-</span><span class="n">step</span><span class="o">)))</span>
            <span class="n">res</span><span class="o">+=</span><span class="n">dfs</span><span class="o">(</span><span class="n">nums</span><span class="o">,</span><span class="n">x</span><span class="o">,</span><span class="n">y</span><span class="o">-</span><span class="n">step</span><span class="o">);</span>
        <span class="k">if</span><span class="o">(</span><span class="n">x</span> <span class="o">+</span> <span class="n">step</span> <span class="o">&lt;</span> <span class="n">row</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="n">visited</span><span class="o">.</span><span class="na">contains</span><span class="o">(</span><span class="k">new</span> <span class="nc">Point</span><span class="o">(</span><span class="n">x</span> <span class="o">+</span> <span class="n">step</span><span class="o">,</span><span class="n">y</span><span class="o">)))</span>
            <span class="n">res</span><span class="o">+=</span><span class="n">dfs</span><span class="o">(</span><span class="n">nums</span><span class="o">,</span><span class="n">x</span> <span class="o">+</span> <span class="n">step</span><span class="o">,</span><span class="n">y</span><span class="o">);</span>
        <span class="k">if</span><span class="o">(</span><span class="n">y</span> <span class="o">+</span> <span class="n">step</span> <span class="o">&lt;</span> <span class="n">col</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="n">visited</span><span class="o">.</span><span class="na">contains</span><span class="o">(</span><span class="k">new</span> <span class="nc">Point</span><span class="o">(</span><span class="n">x</span><span class="o">,</span><span class="n">y</span> <span class="o">+</span> <span class="n">step</span><span class="o">)))</span>
            <span class="n">res</span><span class="o">+=</span><span class="n">dfs</span><span class="o">(</span><span class="n">nums</span><span class="o">,</span><span class="n">x</span><span class="o">,</span><span class="n">y</span> <span class="o">+</span> <span class="n">step</span><span class="o">);</span>

        <span class="k">return</span> <span class="n">res</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="o">?</span> <span class="mi">1</span> <span class="o">:</span> <span class="mi">0</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
<span class="c1">//        Scanner sc = new Scanner(System.in);</span>
<span class="c1">//        int s = sc.nextInt();</span>
<span class="c1">//        int m = sc.nextInt();</span>
<span class="c1">//        int n = sc.nextInt();</span>
<span class="c1">//</span>
<span class="c1">//        int[][] nums = new int[m][n];</span>
<span class="c1">//</span>
<span class="c1">//        for(int i = 0; i &lt; m; ++i){</span>
<span class="c1">//            for (int j = 0; j &lt; n; ++i){</span>
<span class="c1">//                nums[i][j] = sc.nextInt();</span>
<span class="c1">//            }</span>
<span class="c1">//        }</span>

        <span class="kt">int</span><span class="o">[][]</span> <span class="n">nums</span> <span class="o">=</span> <span class="o">{</span>
                <span class="o">{</span><span class="mi">1</span><span class="o">,</span><span class="mi">1</span><span class="o">,</span><span class="mi">1</span><span class="o">,</span><span class="mi">0</span><span class="o">,</span><span class="mi">0</span><span class="o">},</span>
                <span class="o">{</span><span class="mi">0</span><span class="o">,</span><span class="mi">1</span><span class="o">,</span><span class="mi">1</span><span class="o">,</span><span class="mi">0</span><span class="o">,</span><span class="mi">1</span><span class="o">},</span>
                <span class="o">{</span><span class="mi">0</span><span class="o">,</span><span class="mi">0</span><span class="o">,</span><span class="mi">1</span><span class="o">,</span><span class="mi">0</span><span class="o">,</span><span class="mi">1</span><span class="o">}</span>
        <span class="o">};</span>
        <span class="kt">int</span> <span class="no">S</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span>
        <span class="kt">int</span> <span class="n">res</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Main</span><span class="o">().</span><span class="na">solution</span><span class="o">(</span><span class="n">nums</span><span class="o">,</span><span class="no">S</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">res</span><span class="o">);</span>

    <span class="o">}</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h3 id="3-按列输出字符串">3. 按列输出字符串</h3>

<p>给定一个仅由大写字符组成的字符串以及一个指定的奇列数，按从左到右，从上到下的顺序将给定的字符串以大X字形排列晨指定的列数。</p>

<p>例如，给定字符串为EVERYTHINGGOESWELL，指定列数为3，则大X字形排列为</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
</pre></td><td class="rouge-code"><pre><span class="no">E</span>  <span class="no">V</span>
 <span class="no">E</span>
<span class="no">R</span>  <span class="no">Y</span>
 <span class="no">T</span>
<span class="no">H</span>  <span class="no">I</span>
 <span class="no">N</span>
<span class="no">G</span>  <span class="no">G</span>
 <span class="no">O</span>
<span class="no">E</span>  <span class="no">S</span>
 <span class="no">W</span>
<span class="no">E</span>  <span class="no">L</span>
 <span class="no">L</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>然后从上到下逐列读取上面的大X字形排列，产生一个新的字符串，如读取上面的大X字形排列可得目标字符串为：ERHGEEETNOWLVYIGSL</p>

<p><strong>输入描述</strong></p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
</pre></td><td class="rouge-code"><pre><span class="n">任意输入一个仅由大写字母组成的字符串STRING</span><span class="err">，</span><span class="n">以及一个指定的奇列数</span><span class="err">，</span><span class="n">两者用半角都好分隔</span><span class="err">。</span>
 <span class="n">其中</span><span class="err">（</span><span class="mi">1</span> <span class="o">&lt;</span> <span class="no">STRING</span> <span class="o">&lt;</span><span class="mi">2000</span><span class="err">）</span><span class="o">,(</span><span class="mi">3</span> <span class="o">&lt;=</span> <span class="mi">1000</span><span class="o">)</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h4 id="答案-1">答案</h4>

<p>将每个字母都用空格分割，再将重新组成的字符串填入数组arr中，按列读取即可</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
</pre></td><td class="rouge-code"><pre><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Main</span><span class="o">{</span>

    <span class="nc">String</span> <span class="nf">solution</span><span class="o">(</span><span class="nc">String</span> <span class="n">s</span><span class="o">,</span> <span class="kt">int</span> <span class="n">k</span><span class="o">){</span>

        <span class="nc">StringBuffer</span> <span class="n">exeString</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">StringBuffer</span><span class="o">();</span>
        <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">s</span><span class="o">.</span><span class="na">length</span><span class="o">();</span> <span class="o">++</span><span class="n">i</span><span class="o">){</span>
            <span class="n">exeString</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="n">s</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">i</span><span class="o">));</span>
            <span class="k">if</span><span class="o">(</span><span class="n">i</span> <span class="o">!=</span> <span class="n">s</span><span class="o">.</span><span class="na">length</span><span class="o">()-</span><span class="mi">1</span><span class="o">)</span>
                <span class="n">exeString</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="s">" "</span><span class="o">);</span>
        <span class="o">}</span>

        <span class="nc">String</span> <span class="n">exes</span> <span class="o">=</span> <span class="n">exeString</span><span class="o">.</span><span class="na">toString</span><span class="o">();</span>

        <span class="kt">int</span> <span class="n">row</span> <span class="o">=</span> <span class="o">(</span><span class="n">exeString</span><span class="o">.</span><span class="na">length</span><span class="o">()</span> <span class="o">/</span> <span class="n">k</span><span class="o">)</span> <span class="o">+</span> <span class="mi">1</span><span class="o">;</span>
        <span class="kt">int</span> <span class="n">col</span> <span class="o">=</span> <span class="n">k</span><span class="o">;</span>
        <span class="kt">char</span><span class="o">[][]</span> <span class="n">arr</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">char</span><span class="o">[</span><span class="n">row</span><span class="o">][</span><span class="n">col</span><span class="o">];</span>
        <span class="k">for</span> <span class="o">(</span><span class="kt">char</span><span class="o">[]</span> <span class="n">strings</span> <span class="o">:</span> <span class="n">arr</span><span class="o">)</span> <span class="o">{</span>
            <span class="nc">Arrays</span><span class="o">.</span><span class="na">fill</span><span class="o">(</span><span class="n">strings</span><span class="o">,</span><span class="sc">' '</span><span class="o">);</span>
        <span class="o">}</span>
        <span class="kt">int</span> <span class="n">x</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
        <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">row</span><span class="o">;</span> <span class="o">++</span><span class="n">i</span><span class="o">){</span>
            <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">col</span><span class="o">;</span> <span class="o">++</span><span class="n">j</span><span class="o">){</span>
                <span class="k">if</span><span class="o">(</span><span class="n">x</span> <span class="o">&gt;=</span> <span class="n">exes</span><span class="o">.</span><span class="na">length</span><span class="o">())</span>
                    <span class="k">break</span><span class="o">;</span>
                <span class="n">arr</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="n">j</span><span class="o">]</span> <span class="o">=</span> <span class="n">exes</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">x</span><span class="o">++);</span>
            <span class="o">}</span>
        <span class="o">}</span>
        <span class="nc">StringBuffer</span> <span class="n">res</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">StringBuffer</span><span class="o">();</span>
        <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">col</span><span class="o">;</span> <span class="o">++</span><span class="n">i</span><span class="o">){</span>
            <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">row</span><span class="o">;</span> <span class="o">++</span><span class="n">j</span><span class="o">){</span>
                <span class="k">if</span><span class="o">(</span><span class="n">arr</span><span class="o">[</span><span class="n">j</span><span class="o">][</span><span class="n">i</span><span class="o">]</span> <span class="o">!=</span> <span class="sc">' '</span><span class="o">)</span>
                    <span class="n">res</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="n">arr</span><span class="o">[</span><span class="n">j</span><span class="o">][</span><span class="n">i</span><span class="o">]);</span>
            <span class="o">}</span>
        <span class="o">}</span>
        <span class="k">return</span> <span class="n">res</span><span class="o">.</span><span class="na">toString</span><span class="o">();</span>
    <span class="o">}</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
<span class="c1">//        Scanner sc = new Scanner(System.in);</span>
<span class="c1">//        String[] para = sc.nextLine().split(",");</span>
<span class="c1">//        String s = para[0];</span>
<span class="c1">//        Integer k = Integer.parseInt(para[1]);</span>

        <span class="nc">String</span> <span class="n">s</span> <span class="o">=</span> <span class="s">"EVERYTHINGGOESWELL"</span><span class="o">;</span>
        <span class="kt">int</span> <span class="n">k</span> <span class="o">=</span> <span class="mi">37</span><span class="o">;</span>
        <span class="nc">String</span> <span class="n">res</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Main</span><span class="o">().</span><span class="na">solution</span><span class="o">(</span><span class="n">s</span><span class="o">,</span> <span class="n">k</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">res</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h2 id="bilibili-2020-8-13">Bilibili-2020-8-13</h2>

<h3 id="1-算24点">1. 算24点</h3>

<p>给出4个1-10的数字，通过加减乘除，得到数字为24就算胜利</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
</pre></td><td class="rouge-code"><pre><span class="kd">class</span> <span class="nc">Solution</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">judgePoint24</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">nums</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">ArrayList</span> <span class="no">A</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ArrayList</span><span class="o">&lt;</span><span class="nc">Double</span><span class="o">&gt;();</span>
        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="nl">v:</span> <span class="n">nums</span><span class="o">)</span> <span class="no">A</span><span class="o">.</span><span class="na">add</span><span class="o">((</span><span class="kt">double</span><span class="o">)</span> <span class="n">v</span><span class="o">);</span>
        <span class="k">return</span> <span class="nf">solve</span><span class="o">(</span><span class="no">A</span><span class="o">);</span>
    <span class="o">}</span>
    <span class="kd">private</span> <span class="kt">boolean</span> <span class="nf">solve</span><span class="o">(</span><span class="nc">ArrayList</span><span class="o">&lt;</span><span class="nc">Double</span><span class="o">&gt;</span> <span class="n">nums</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">nums</span><span class="o">.</span><span class="na">size</span><span class="o">()</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">nums</span><span class="o">.</span><span class="na">size</span><span class="o">()</span> <span class="o">==</span> <span class="mi">1</span><span class="o">)</span> <span class="k">return</span> <span class="nc">Math</span><span class="o">.</span><span class="na">abs</span><span class="o">(</span><span class="n">nums</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="mi">0</span><span class="o">)</span> <span class="o">-</span> <span class="mi">24</span><span class="o">)</span> <span class="o">&lt;</span> <span class="mi">1</span><span class="n">e</span><span class="o">-</span><span class="mi">6</span><span class="o">;</span>

        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">nums</span><span class="o">.</span><span class="na">size</span><span class="o">();</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">nums</span><span class="o">.</span><span class="na">size</span><span class="o">();</span> <span class="n">j</span><span class="o">++)</span> <span class="o">{</span>
                <span class="k">if</span> <span class="o">(</span><span class="n">i</span> <span class="o">!=</span> <span class="n">j</span><span class="o">)</span> <span class="o">{</span>
                    <span class="nc">ArrayList</span><span class="o">&lt;</span><span class="nc">Double</span><span class="o">&gt;</span> <span class="n">nums2</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ArrayList</span><span class="o">&lt;</span><span class="nc">Double</span><span class="o">&gt;();</span>
                    <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">k</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">k</span> <span class="o">&lt;</span> <span class="n">nums</span><span class="o">.</span><span class="na">size</span><span class="o">();</span> <span class="n">k</span><span class="o">++)</span> <span class="k">if</span> <span class="o">(</span><span class="n">k</span> <span class="o">!=</span> <span class="n">i</span> <span class="o">&amp;&amp;</span> <span class="n">k</span> <span class="o">!=</span> <span class="n">j</span><span class="o">)</span> <span class="o">{</span>
                        <span class="n">nums2</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">nums</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">k</span><span class="o">));</span>
                    <span class="o">}</span>
                    <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">k</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">k</span> <span class="o">&lt;</span> <span class="mi">4</span><span class="o">;</span> <span class="n">k</span><span class="o">++)</span> <span class="o">{</span>
                        <span class="k">if</span> <span class="o">(</span><span class="n">k</span> <span class="o">&lt;</span> <span class="mi">2</span> <span class="o">&amp;&amp;</span> <span class="n">j</span> <span class="o">&gt;</span> <span class="n">i</span><span class="o">)</span> <span class="k">continue</span><span class="o">;</span>
                        <span class="k">if</span> <span class="o">(</span><span class="n">k</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> <span class="n">nums2</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">nums</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">i</span><span class="o">)</span> <span class="o">+</span> <span class="n">nums</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">j</span><span class="o">));</span>
                        <span class="k">if</span> <span class="o">(</span><span class="n">k</span> <span class="o">==</span> <span class="mi">1</span><span class="o">)</span> <span class="n">nums2</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">nums</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">i</span><span class="o">)</span> <span class="o">*</span> <span class="n">nums</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">j</span><span class="o">));</span>
                        <span class="k">if</span> <span class="o">(</span><span class="n">k</span> <span class="o">==</span> <span class="mi">2</span><span class="o">)</span> <span class="n">nums2</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">nums</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">i</span><span class="o">)</span> <span class="o">-</span> <span class="n">nums</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">j</span><span class="o">));</span>
                        <span class="k">if</span> <span class="o">(</span><span class="n">k</span> <span class="o">==</span> <span class="mi">3</span><span class="o">)</span> <span class="o">{</span>
                            <span class="k">if</span> <span class="o">(</span><span class="n">nums</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">j</span><span class="o">)</span> <span class="o">!=</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
                                <span class="n">nums2</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">nums</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">i</span><span class="o">)</span> <span class="o">/</span> <span class="n">nums</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">j</span><span class="o">));</span>
                            <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
                                <span class="k">continue</span><span class="o">;</span>
                            <span class="o">}</span>
                        <span class="o">}</span>
                        <span class="k">if</span> <span class="o">(</span><span class="n">solve</span><span class="o">(</span><span class="n">nums2</span><span class="o">))</span> <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
                        <span class="n">nums2</span><span class="o">.</span><span class="na">remove</span><span class="o">(</span><span class="n">nums2</span><span class="o">.</span><span class="na">size</span><span class="o">()</span> <span class="o">-</span> <span class="mi">1</span><span class="o">);</span>
                    <span class="o">}</span>
                <span class="o">}</span>
            <span class="o">}</span>
        <span class="o">}</span>
        <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h4 id="我的答案">我的答案</h4>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
</pre></td><td class="rouge-code"><pre><span class="kd">class</span> <span class="nc">Solution</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">judgePoint24</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">nums</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">List</span><span class="o">&lt;</span><span class="nc">Double</span><span class="o">&gt;</span> <span class="n">numbers</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ArrayList</span><span class="o">&lt;&gt;();</span>
        <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">num</span> <span class="o">:</span> <span class="n">nums</span><span class="o">)</span>
            <span class="n">numbers</span><span class="o">.</span><span class="na">add</span><span class="o">((</span><span class="kt">double</span><span class="o">)</span><span class="n">num</span><span class="o">);</span>
        <span class="k">return</span> <span class="nf">solve</span><span class="o">(</span><span class="n">numbers</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="kt">boolean</span> <span class="nf">solve</span><span class="o">(</span><span class="nc">List</span><span class="o">&lt;</span><span class="nc">Double</span><span class="o">&gt;</span> <span class="n">numbers</span><span class="o">){</span>
        <span class="c1">//若list为空，返回false</span>
        <span class="k">if</span><span class="o">(</span><span class="n">numbers</span><span class="o">.</span><span class="na">size</span><span class="o">()</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
        <span class="c1">//若list长度为1，则说明计算到了最终结果，比较</span>
        <span class="k">if</span><span class="o">(</span><span class="n">numbers</span><span class="o">.</span><span class="na">size</span><span class="o">()</span> <span class="o">==</span> <span class="mi">1</span><span class="o">)</span>
            <span class="k">return</span> <span class="nc">Math</span><span class="o">.</span><span class="na">abs</span><span class="o">((</span><span class="n">numbers</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="mi">0</span><span class="o">)</span> <span class="o">-</span> <span class="mi">24</span><span class="o">*</span><span class="mf">1.0</span><span class="o">))</span> <span class="o">&lt;</span> <span class="mi">1</span><span class="n">e</span><span class="o">-</span><span class="mi">6</span><span class="o">;</span>
        
        <span class="c1">//从其中取出2个不同的数</span>
        <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">numbers</span><span class="o">.</span><span class="na">size</span><span class="o">();</span> <span class="o">++</span><span class="n">i</span><span class="o">){</span>
            <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">numbers</span><span class="o">.</span><span class="na">size</span><span class="o">();</span> <span class="o">++</span><span class="n">j</span><span class="o">){</span>
                <span class="k">if</span><span class="o">(</span><span class="n">i</span> <span class="o">!=</span> <span class="n">j</span><span class="o">){</span>
                    <span class="c1">//新建一个数组，避免将取出的数插入到原来的位置</span>
                    <span class="nc">List</span><span class="o">&lt;</span><span class="nc">Double</span><span class="o">&gt;</span> <span class="n">nums</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ArrayList</span><span class="o">&lt;&gt;();</span>
                    <span class="c1">//将原数组的剩余的数插入到新数组中</span>
                    <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">k</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">k</span> <span class="o">&lt;</span> <span class="n">numbers</span><span class="o">.</span><span class="na">size</span><span class="o">();</span> <span class="o">++</span><span class="n">k</span><span class="o">){</span>
                        <span class="k">if</span><span class="o">(</span><span class="n">k</span> <span class="o">!=</span> <span class="n">i</span> <span class="o">&amp;&amp;</span> <span class="n">k</span> <span class="o">!=</span> <span class="n">j</span><span class="o">)</span>
                            <span class="n">nums</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">numbers</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">k</span><span class="o">));</span>
                    <span class="o">}</span>
                    <span class="c1">//计算i,j两个数的结果集，也加入nums数组中</span>
                    <span class="nc">Set</span><span class="o">&lt;</span><span class="nc">Double</span><span class="o">&gt;</span> <span class="n">resultSet</span> <span class="o">=</span> <span class="n">cal</span><span class="o">(</span><span class="n">numbers</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">i</span><span class="o">),</span> <span class="n">numbers</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">j</span><span class="o">));</span>
                    <span class="c1">//回溯</span>
                    <span class="k">for</span><span class="o">(</span><span class="nc">Double</span> <span class="n">res</span> <span class="o">:</span> <span class="n">resultSet</span><span class="o">){</span>
                        <span class="n">nums</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">res</span><span class="o">);</span>
                        <span class="k">if</span><span class="o">(</span><span class="n">solve</span><span class="o">(</span><span class="n">nums</span><span class="o">))</span>
                            <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
                        <span class="n">nums</span><span class="o">.</span><span class="na">remove</span><span class="o">(</span><span class="n">nums</span><span class="o">.</span><span class="na">size</span><span class="o">()-</span><span class="mi">1</span><span class="o">);</span>
                    <span class="o">}</span>
                <span class="o">}</span>
            <span class="o">}</span>
        <span class="o">}</span>
        <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="nc">Set</span><span class="o">&lt;</span><span class="nc">Double</span><span class="o">&gt;</span> <span class="nf">cal</span><span class="o">(</span><span class="nc">Double</span> <span class="n">a</span><span class="o">,</span> <span class="nc">Double</span> <span class="n">b</span><span class="o">){</span>
        <span class="nc">Set</span><span class="o">&lt;</span><span class="nc">Double</span><span class="o">&gt;</span> <span class="n">set</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">HashSet</span><span class="o">&lt;&gt;();</span>
        <span class="n">set</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">a</span><span class="o">-</span><span class="n">b</span><span class="o">);</span>
        <span class="n">set</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">b</span><span class="o">-</span><span class="n">a</span><span class="o">);</span>
        <span class="n">set</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">a</span><span class="o">+</span><span class="n">b</span><span class="o">);</span>
        <span class="n">set</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">a</span><span class="o">*</span><span class="n">b</span><span class="o">);</span>
        <span class="k">if</span><span class="o">(</span><span class="n">a</span> <span class="o">!=</span> <span class="mi">0</span><span class="o">)</span>
            <span class="n">set</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">b</span><span class="o">/</span><span class="n">a</span><span class="o">);</span>
        <span class="k">if</span><span class="o">(</span><span class="n">b</span> <span class="o">!=</span> <span class="mi">0</span><span class="o">)</span>
            <span class="n">set</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">a</span><span class="o">/</span><span class="n">b</span><span class="o">);</span>
        <span class="k">return</span> <span class="n">set</span><span class="o">;</span>
    <span class="o">}</span>


<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h3 id="2-有效括号">2. 有效括号</h3>

<p>给定一个字包含括号的字符串，判断字符串是否有效。其中，括号种类包含</p>

<p><code class="language-plaintext highlighter-rouge">'{','}','(',')','[',']'</code>，有效字符串需满足：（1）左括号必须用相同类型的右括号闭合。（2）左括号必须以正确的顺序闭合，注意空字符串可被认为是有效字符串。</p>

<h4 id="答案-2">答案</h4>

<h5 id="用栈">用栈</h5>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
</pre></td><td class="rouge-code"><pre><span class="kd">class</span> <span class="nc">Solution</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">isValid</span><span class="o">(</span><span class="nc">String</span> <span class="n">s</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">if</span><span class="o">(</span><span class="n">s</span><span class="o">.</span><span class="na">length</span><span class="o">()</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>

        <span class="k">if</span><span class="o">(</span><span class="n">s</span><span class="o">.</span><span class="na">length</span><span class="o">()</span> <span class="o">%</span> <span class="mi">2</span> <span class="o">!=</span> <span class="mi">0</span><span class="o">)</span> <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>

        <span class="nc">Stack</span><span class="o">&lt;</span><span class="nc">Character</span><span class="o">&gt;</span> <span class="n">stack</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Stack</span><span class="o">&lt;&gt;();</span>
        <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">s</span><span class="o">.</span><span class="na">length</span><span class="o">();</span> <span class="o">++</span><span class="n">i</span><span class="o">){</span>
            <span class="k">if</span><span class="o">(</span><span class="n">s</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">i</span><span class="o">)</span> <span class="o">==</span> <span class="sc">'('</span> <span class="o">||</span> <span class="n">s</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">i</span><span class="o">)</span> <span class="o">==</span> <span class="sc">'{'</span> <span class="o">||</span> <span class="n">s</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">i</span><span class="o">)</span> <span class="o">==</span> <span class="sc">'['</span><span class="o">)</span>
                <span class="n">stack</span><span class="o">.</span><span class="na">push</span><span class="o">(</span><span class="n">s</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">i</span><span class="o">));</span>
            <span class="k">else</span><span class="o">{</span>
                <span class="k">if</span><span class="o">(</span><span class="n">stack</span><span class="o">.</span><span class="na">size</span><span class="o">()</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span>
                    <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
                <span class="nc">Character</span> <span class="n">c</span> <span class="o">=</span> <span class="n">stack</span><span class="o">.</span><span class="na">pop</span><span class="o">();</span>
                <span class="k">if</span><span class="o">(</span><span class="n">s</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">i</span><span class="o">)</span> <span class="o">==</span> <span class="sc">')'</span> <span class="o">&amp;&amp;</span> <span class="n">c</span> <span class="o">!=</span> <span class="sc">'('</span><span class="o">)</span>
                    <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
                <span class="k">else</span> <span class="nf">if</span><span class="o">(</span><span class="n">s</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">i</span><span class="o">)</span> <span class="o">==</span> <span class="sc">'}'</span> <span class="o">&amp;&amp;</span> <span class="n">c</span> <span class="o">!=</span> <span class="sc">'{'</span><span class="o">)</span>
                    <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
                <span class="k">else</span> <span class="nf">if</span><span class="o">(</span><span class="n">s</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">i</span><span class="o">)</span> <span class="o">==</span> <span class="sc">']'</span> <span class="o">&amp;&amp;</span> <span class="n">c</span> <span class="o">!=</span> <span class="sc">'['</span><span class="o">)</span>
                    <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
            <span class="o">}</span>
        <span class="o">}</span>
        <span class="k">return</span> <span class="n">stack</span><span class="o">.</span><span class="na">size</span><span class="o">()==</span><span class="mi">0</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h5 id="用map栈">用map+栈</h5>
<p>以下代码需要放入</p>

<p>​</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
</pre></td><td class="rouge-code"><pre><span class="kd">class</span> <span class="nc">Solution</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="nc">Map</span><span class="o">&lt;</span><span class="nc">Character</span><span class="o">,</span><span class="nc">Character</span><span class="o">&gt;</span> <span class="n">map</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">HashMap</span><span class="o">&lt;</span><span class="nc">Character</span><span class="o">,</span><span class="nc">Character</span><span class="o">&gt;()</span><span class="err">\</span><span class="o">{</span><span class="err">\</span><span class="o">{</span>      <span class="n">put</span><span class="o">(</span><span class="sc">'{'</span><span class="o">,</span><span class="sc">'}'</span><span class="o">);</span> <span class="n">put</span><span class="o">(</span><span class="sc">'['</span><span class="o">,</span><span class="sc">']'</span><span class="o">);</span> <span class="n">put</span><span class="o">(</span><span class="sc">'('</span><span class="o">,</span><span class="sc">')'</span><span class="o">);</span> <span class="n">put</span><span class="o">(</span><span class="sc">'?'</span><span class="o">,</span><span class="sc">'?'</span><span class="o">);</span><span class="err">\</span><span class="o">}</span><span class="err">\</span><span class="o">};</span>
    <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">isValid</span><span class="o">(</span><span class="nc">String</span> <span class="n">s</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">if</span><span class="o">(</span><span class="n">s</span><span class="o">.</span><span class="na">length</span><span class="o">()</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="n">map</span><span class="o">.</span><span class="na">containsKey</span><span class="o">(</span><span class="n">s</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="mi">0</span><span class="o">)))</span> <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
        <span class="nc">LinkedList</span><span class="o">&lt;</span><span class="nc">Character</span><span class="o">&gt;</span> <span class="n">stack</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">LinkedList</span><span class="o">&lt;</span><span class="nc">Character</span><span class="o">&gt;()</span> <span class="o">{{</span> <span class="n">add</span><span class="o">(</span><span class="sc">'?'</span><span class="o">);</span> <span class="o">}};</span>
        <span class="k">for</span><span class="o">(</span><span class="nc">Character</span> <span class="n">c</span> <span class="o">:</span> <span class="n">s</span><span class="o">.</span><span class="na">toCharArray</span><span class="o">()){</span>
            <span class="k">if</span><span class="o">(</span><span class="n">map</span><span class="o">.</span><span class="na">containsKey</span><span class="o">(</span><span class="n">c</span><span class="o">))</span> <span class="n">stack</span><span class="o">.</span><span class="na">addLast</span><span class="o">(</span><span class="n">c</span><span class="o">);</span>
            <span class="k">else</span> <span class="nf">if</span><span class="o">(</span><span class="n">map</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">stack</span><span class="o">.</span><span class="na">removeLast</span><span class="o">())</span> <span class="o">!=</span> <span class="n">c</span><span class="o">)</span> <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
        <span class="o">}</span>
        <span class="k">return</span> <span class="n">stack</span><span class="o">.</span><span class="na">size</span><span class="o">()</span> <span class="o">==</span> <span class="mi">1</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h3 id="3-最少硬币">3. 最少硬币</h3>

<p>面值1元、4元、16元、64元共计4种硬币，以及面值1024元的纸币，现在小Y使用1024元的纸币购买了一件价值为N（0&lt;N&lt;=1024）的商品，请问最少他会收到多少硬币。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
</pre></td><td class="rouge-code"><pre>	<span class="nc">Scanner</span> <span class="n">sc</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Scanner</span><span class="o">(</span><span class="nc">System</span><span class="o">.</span><span class="na">in</span><span class="o">);</span>
  <span class="kt">int</span> <span class="n">n</span> <span class="o">=</span> <span class="n">sc</span><span class="o">.</span><span class="na">nextInt</span><span class="o">();</span>
  <span class="kt">int</span> <span class="n">cnum1</span><span class="o">,</span><span class="n">cnum2</span><span class="o">,</span><span class="n">cnum3</span><span class="o">,</span><span class="n">cnum4</span><span class="o">;</span>
  <span class="n">cnum1</span><span class="o">=(</span><span class="mi">1024</span><span class="o">-</span><span class="n">n</span><span class="o">)/</span><span class="mi">64</span><span class="o">;</span>                          <span class="c1">//64元硬币的数量</span>
  <span class="n">cnum2</span><span class="o">=((</span><span class="mi">1024</span><span class="o">-</span><span class="n">n</span><span class="o">)%</span><span class="mi">64</span><span class="o">)/</span><span class="mi">16</span><span class="o">;</span>                     <span class="c1">//16元硬币的数量</span>
  <span class="n">cnum3</span><span class="o">=(((</span><span class="mi">1024</span><span class="o">-</span><span class="n">n</span><span class="o">)%</span><span class="mi">64</span><span class="o">)%</span><span class="mi">16</span><span class="o">)/</span><span class="mi">4</span><span class="o">;</span>                 <span class="c1">//4元硬币的数量</span>
  <span class="n">cnum4</span><span class="o">=(</span><span class="mi">1024</span><span class="o">-</span><span class="n">n</span><span class="o">)-(</span><span class="n">cnum1</span><span class="o">*</span><span class="mi">64</span><span class="o">+</span><span class="n">cnum2</span><span class="o">*</span><span class="mi">16</span><span class="o">+</span><span class="n">cnum3</span><span class="o">*</span><span class="mi">4</span><span class="o">);</span> <span class="c1">//1元硬币的数量</span>
  <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">cnum1</span><span class="o">+</span><span class="n">cnum2</span><span class="o">+</span><span class="n">cnum3</span><span class="o">+</span><span class="n">cnum4</span><span class="o">);</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h2 id="美团-2020-8-15">美团-2020-8-15</h2>

<h3 id="车辆调度">车辆调度</h3>

<p>某个时刻A和B两地都向该公司提交了租车订单，分别需要a和b辆汽车。此时，公司的所有车辆都在外运营，通过北斗定位，可以得到所有车辆的位置，分别计算了每辆车前往A地和B地完成订单的利润。作为一名精明的调度师，当然是想让公司的利润最大化。</p>

<p>请你帮他分别选择a辆车完成A地任务，选择b辆车完成B地任务。使得公司获利最大，每辆车最多只能完成一地的任务。</p>

<p>输入描述</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
</pre></td><td class="rouge-code"><pre><span class="n">输入第一行包含3个整数n</span><span class="o">,</span><span class="n">a</span><span class="o">,</span><span class="n">b</span><span class="err">，</span><span class="n">分别表示公司的车辆数量和A</span><span class="o">,</span><span class="nc">B两地订单所需数量</span><span class="err">，</span><span class="n">保证a</span><span class="o">+</span><span class="n">b</span><span class="o">&lt;=</span><span class="n">n</span><span class="o">(</span><span class="mi">1</span><span class="o">&lt;=</span><span class="n">n</span><span class="o">&lt;=</span><span class="mi">2000</span><span class="o">)</span>
  <span class="n">接下来有n行</span><span class="err">，</span><span class="n">每行两个正整数x</span><span class="o">,</span><span class="n">y</span><span class="err">，</span><span class="n">分别表示该车完成A地任务的利润和B地任务的利润</span><span class="err">。</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>输出最大利润和</p>

<h4 id="我的答案-1">我的答案</h4>

<p>将每辆车到A的利润减去到B的利润，选择去A比去B贡献大，且最大的a辆车给A地，剩余n-a辆车中选择利润最大的b辆给B地。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
</pre></td><td class="rouge-code"><pre><span class="kn">import</span> <span class="nn">com.sun.javafx.collections.MappingChange</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">javax.imageio.ImageTranscoder</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.lang.reflect.Array</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.*</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.stream.Collectors</span><span class="o">;</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Main</span> <span class="o">{</span>


    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">int</span> <span class="nf">solution</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">nums1</span><span class="o">,</span> <span class="kt">int</span><span class="o">[]</span> <span class="n">nums2</span><span class="o">,</span> <span class="kt">int</span> <span class="n">a</span><span class="o">,</span> <span class="kt">int</span> <span class="n">b</span><span class="o">){</span>
        <span class="kt">int</span> <span class="n">n</span> <span class="o">=</span> <span class="n">nums1</span><span class="o">.</span><span class="na">length</span><span class="o">;</span>
        <span class="kt">int</span> <span class="n">res</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
<span class="c1">//        int sum  = 0;</span>
<span class="c1">//        for(int i = 0; i &lt; nums1.length; ++i){</span>
<span class="c1">//            sum += nums1[i];</span>
<span class="c1">//        }</span>

        <span class="kt">int</span><span class="o">[]</span> <span class="n">diff</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="n">n</span><span class="o">];</span>

        <span class="nc">Map</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">,</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">map</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">HashMap</span><span class="o">&lt;&gt;();</span>

      	<span class="c1">//计算贡献差，并将其和下标绑定，便于在nums1和nums2中读取选择的车的利润</span>
        <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span><span class="o">;</span> <span class="o">++</span><span class="n">i</span><span class="o">){</span>
            <span class="n">diff</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="n">nums1</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">-</span> <span class="n">nums2</span><span class="o">[</span><span class="n">i</span><span class="o">];</span>
            <span class="n">map</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">i</span><span class="o">,</span><span class="n">diff</span><span class="o">[</span><span class="n">i</span><span class="o">]);</span>
        <span class="o">}</span>

        <span class="nc">Arrays</span><span class="o">.</span><span class="na">sort</span><span class="o">(</span><span class="n">diff</span><span class="o">);</span>

        <span class="nc">Set</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">set</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">HashSet</span><span class="o">&lt;&gt;();</span>
        <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">n</span><span class="o">-</span><span class="mi">1</span><span class="o">;</span> <span class="n">i</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="o">;</span> <span class="o">--</span><span class="n">i</span><span class="o">){</span>
            <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">map</span><span class="o">.</span><span class="na">size</span><span class="o">();</span> <span class="o">++</span><span class="n">j</span><span class="o">){</span>
                <span class="k">if</span><span class="o">(</span><span class="n">map</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">j</span><span class="o">)</span> <span class="o">==</span> <span class="n">diff</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="n">set</span><span class="o">.</span><span class="na">contains</span><span class="o">(</span><span class="n">j</span><span class="o">)){</span>
                    <span class="k">if</span><span class="o">(</span><span class="n">a</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> <span class="k">break</span><span class="o">;</span>
                    <span class="n">a</span><span class="o">--;</span>
                    <span class="n">set</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">j</span><span class="o">);</span>
                    <span class="n">res</span><span class="o">+=</span><span class="n">nums1</span><span class="o">[</span><span class="n">j</span><span class="o">];</span>
                <span class="o">}</span>
            <span class="o">}</span>
            <span class="k">if</span><span class="o">(</span><span class="n">a</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> <span class="k">break</span><span class="o">;</span>
        <span class="o">}</span>

        <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">b</span><span class="o">;</span> <span class="o">++</span><span class="n">i</span><span class="o">){</span>
            <span class="n">res</span><span class="o">+=</span> <span class="n">getMax</span><span class="o">(</span><span class="n">nums2</span><span class="o">,</span><span class="n">set</span><span class="o">);</span>
        <span class="o">}</span>

        <span class="k">return</span> <span class="n">res</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="kd">static</span> <span class="kt">int</span> <span class="nf">getMax</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">nums</span><span class="o">,</span> <span class="nc">Set</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">set</span><span class="o">){</span>
        <span class="k">if</span><span class="o">(</span><span class="n">nums</span><span class="o">.</span><span class="na">length</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> <span class="k">return</span> <span class="mi">0</span><span class="o">;</span>
        <span class="k">if</span><span class="o">(</span><span class="n">set</span><span class="o">.</span><span class="na">size</span><span class="o">()</span> <span class="o">==</span> <span class="n">nums</span><span class="o">.</span><span class="na">length</span><span class="o">)</span> <span class="k">return</span> <span class="mi">0</span><span class="o">;</span>
        <span class="kt">int</span> <span class="n">max</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">MIN_VALUE</span><span class="o">;</span>
        <span class="kt">int</span> <span class="n">pos</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="o">;</span>
        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">nums</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="o">++</span><span class="n">i</span><span class="o">){</span>
            <span class="k">if</span><span class="o">(!</span><span class="n">set</span><span class="o">.</span><span class="na">contains</span><span class="o">(</span><span class="n">i</span><span class="o">)</span> <span class="o">&amp;&amp;</span> <span class="n">max</span> <span class="o">&lt;</span> <span class="n">nums</span><span class="o">[</span><span class="n">i</span><span class="o">]){</span>
                <span class="n">max</span> <span class="o">=</span> <span class="n">nums</span><span class="o">[</span><span class="n">i</span><span class="o">];</span>
                <span class="n">pos</span> <span class="o">=</span> <span class="n">i</span><span class="o">;</span>
            <span class="o">}</span>
        <span class="o">}</span>
        <span class="k">if</span><span class="o">(</span><span class="n">pos</span> <span class="o">!=</span> <span class="o">-</span><span class="mi">1</span><span class="o">)</span>
            <span class="n">set</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">pos</span><span class="o">);</span>

        <span class="k">return</span> <span class="n">max</span><span class="o">;</span>
    <span class="o">}</span>


    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">Scanner</span> <span class="n">sc</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Scanner</span><span class="o">(</span><span class="nc">System</span><span class="o">.</span><span class="na">in</span><span class="o">);</span>
        <span class="kt">int</span> <span class="n">n</span> <span class="o">=</span> <span class="n">sc</span><span class="o">.</span><span class="na">nextInt</span><span class="o">();</span>
        <span class="kt">int</span> <span class="n">a</span> <span class="o">=</span> <span class="n">sc</span><span class="o">.</span><span class="na">nextInt</span><span class="o">();</span>
        <span class="kt">int</span> <span class="n">b</span> <span class="o">=</span> <span class="n">sc</span><span class="o">.</span><span class="na">nextInt</span><span class="o">();</span>
        <span class="kt">int</span><span class="o">[]</span> <span class="n">nums1</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="n">n</span><span class="o">];</span>
        <span class="kt">int</span><span class="o">[]</span> <span class="n">nums2</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="n">n</span><span class="o">];</span>
        <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span><span class="o">;</span> <span class="o">++</span><span class="n">i</span><span class="o">){</span>
            <span class="kt">int</span> <span class="n">x</span> <span class="o">=</span> <span class="n">sc</span><span class="o">.</span><span class="na">nextInt</span><span class="o">();</span>
            <span class="kt">int</span> <span class="n">y</span> <span class="o">=</span> <span class="n">sc</span><span class="o">.</span><span class="na">nextInt</span><span class="o">();</span>
            <span class="n">nums1</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="n">x</span><span class="o">;</span>
            <span class="n">nums2</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="n">y</span><span class="o">;</span>
        <span class="o">}</span>
        <span class="n">solution</span><span class="o">(</span><span class="n">nums1</span><span class="o">,</span><span class="n">nums2</span><span class="o">,</span><span class="n">a</span><span class="o">,</span><span class="n">b</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h2 id="字节跳动-2020-8-16">字节跳动-2020-8-16</h2>

<h3 id="1-编码协议">1. 编码协议</h3>

<p>小明在学习一种编码协议，二进制数据可以用一串16进制的字符来表示（0-9，A-F），其中“0010”是这个协议的特殊字符串，不允许出现；</p>

<p>现在给出一串16进制的字符串s，问：</p>

<p>最少去掉几个字符，使得剩下的字符串不存在’0010’。</p>

<p>输入描述：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
</pre></td><td class="rouge-code"><pre><span class="n">第一行</span> <span class="n">t</span> <span class="err">（</span><span class="mi">1</span><span class="o">&lt;=</span><span class="n">t</span> <span class="o">&lt;=</span> <span class="mi">1000</span><span class="err">），</span><span class="n">表示接下来有t个样例</span>

<span class="n">每个样例一行字符串s</span><span class="err">，</span><span class="n">s的长度不大于10</span><span class="o">^</span><span class="mi">5</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>输入</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
</pre></td><td class="rouge-code"><pre><span class="mi">2</span>
<span class="mo">01234567</span><span class="mi">89</span><span class="no">ABCDEF</span>
<span class="mo">0010234567</span><span class="mi">89</span><span class="no">ABCDEF00</span>  
</pre></td></tr></tbody></table></code></pre></div></div>

<p>输出</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
</pre></td><td class="rouge-code"><pre><span class="mi">0</span>
<span class="mi">1</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h3 id="2-二叉树的叶节点数">2. 二叉树的叶节点数</h3>

<p>给定一颗二叉树，二叉树每个节点都有一个唯一的正整数值代表节点，在遍历时，我们使用节点的整数值作为标记。</p>

<p>输入：二叉树的节点个数，前序和中序遍历结果，分别是第一行、第二行与第三行</p>

<p>输出：二叉树叶节点的个数</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
</pre></td><td class="rouge-code"><pre><span class="n">第一行</span> <span class="n">输入二叉树节点个数N</span><span class="err">，</span><span class="n">其中0</span><span class="o">&lt;</span><span class="n">n</span><span class="o">&lt;</span><span class="mi">30000</span>

<span class="n">第二行与第三行</span><span class="err">，</span><span class="n">分别输入二叉树的前序和中序遍历结果</span><span class="err">，</span><span class="n">每个节点对应唯一整数值</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>输入</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
</pre></td><td class="rouge-code"><pre><span class="mi">3</span>
<span class="mi">1</span> <span class="mi">3</span> <span class="mi">4</span>
<span class="mi">3</span> <span class="mi">1</span> <span class="mi">4</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>输出</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre><span class="mi">2</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h3 id="3-广告插入">3. 广告插入</h3>

<p>某视频网站上有N个视频，每个视频时长为L_i秒。</p>

<p>产品经理找到你，希望你帮忙在其中插入M个广告。</p>

<p>一个视频里的两个广告必须间隔一段时间（间隔时间可以为0）</p>

<p>考虑到用户体验，他希望这个间隔尽可能长。</p>

<p>为方便实现，间隔时间是一个整数</p>

<p>请你帮忙计算一下，这个间隔时间最大可以设置为多少秒呢？</p>

<p>如果不能插入M条广告，输出0</p>

<p>输入描述：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
</pre></td><td class="rouge-code"><pre><span class="n">第一行有两个整数</span> <span class="no">N</span><span class="o">,</span><span class="no">M</span> <span class="o">(</span><span class="mi">1</span> <span class="o">&lt;=</span> <span class="no">N</span> <span class="o">&lt;=</span> <span class="mi">100000</span><span class="o">,</span> <span class="no">N</span> <span class="o">&lt;</span> <span class="no">M</span> <span class="o">&lt;=</span> <span class="mi">5000000</span><span class="o">)</span>
<span class="n">第二行有N个整数</span> <span class="n">L_i</span><span class="err">，</span><span class="n">表示视频的时长</span><span class="err">（</span><span class="mi">1</span> <span class="o">&lt;=</span> <span class="n">L_i</span> <span class="o">&lt;=</span> <span class="mi">1000000000</span><span class="err">）</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>输出描述：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre><span class="n">一个整数</span><span class="err">，</span><span class="n">表示最大的时间间隔</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>示例</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
</pre></td><td class="rouge-code"><pre><span class="mi">3</span> <span class="mi">9</span>
<span class="mi">90</span> <span class="mi">100</span> <span class="mi">120</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>输出</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre><span class="mi">45</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>说明</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
</pre></td><td class="rouge-code"><pre><span class="n">最长广告间隔为45秒</span>
<span class="n">第一个视频时长90秒</span><span class="err">，</span><span class="n">可以在第0秒</span><span class="err">，</span><span class="n">第45秒</span><span class="err">，</span><span class="n">第90秒分别插入广告</span><span class="err">，</span><span class="n">总共3个广告</span><span class="err">。</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h3 id="寻觅">寻觅</h3>

<p>在n个正整数中，任意挑选K个（不可重复挑选，0 &lt;= k &lt;=n）数字的和记为sum，另有一个正整数m，请问sun % m最大为多少?</p>

<p>输入描述：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
</pre></td><td class="rouge-code"><pre><span class="n">第一行两个正整数</span><span class="err">，</span><span class="n">分别是n</span><span class="o">,</span><span class="n">m</span>
<span class="n">第二行为n个正整数</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>输出描述：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre><span class="n">一个数x</span><span class="err">，</span><span class="n">x表示sum</span><span class="o">%</span><span class="n">m的最大值</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>示例</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
</pre></td><td class="rouge-code"><pre><span class="mi">5</span> <span class="mi">5</span>
<span class="mi">1</span> <span class="mi">2</span> <span class="mi">3</span> <span class="mi">4</span> <span class="mi">5</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>输出</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre><span class="mi">4</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>备注：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
</pre></td><td class="rouge-code"><pre><span class="n">数据范围</span>
<span class="mi">2</span><span class="o">&lt;=</span><span class="n">m</span> <span class="o">&lt;=</span> <span class="mi">1</span><span class="n">e9</span> <span class="o">+</span> <span class="mi">7</span>
<span class="mi">30</span><span class="o">%</span><span class="n">的数据</span><span class="o">(</span><span class="mi">1</span> <span class="o">&lt;=</span> <span class="n">n</span> <span class="o">&lt;=</span> <span class="mi">15</span><span class="o">)</span>
<span class="mi">40</span><span class="o">%</span><span class="n">的数据</span><span class="o">(</span><span class="mi">1</span> <span class="o">&lt;=</span> <span class="n">n</span> <span class="o">&lt;=</span> <span class="mi">25</span><span class="o">)</span>
<span class="mi">40</span><span class="o">%</span><span class="n">的数据</span><span class="o">(</span><span class="mi">1</span> <span class="o">&lt;=</span> <span class="n">n</span> <span class="o">&lt;=</span> <span class="mi">35</span><span class="o">)</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h2 id="滴滴-2020-8-21">滴滴-2020-8-21</h2>

<h3 id="逆序地顺时针打印斐波那契数">逆序地顺时针打印斐波那契数</h3>

<p>输入一个正整数n，表示矩阵的行列。用逆序的斐波那契数顺时针填入该矩阵。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
</pre></td><td class="rouge-code"><pre><span class="kn">import</span> <span class="nn">java.util.Scanner</span><span class="o">;</span>

<span class="kd">class</span> <span class="nc">Solution</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">long</span><span class="o">[][]</span> <span class="nf">spiralOrder</span><span class="o">(</span><span class="kt">long</span><span class="o">[]</span> <span class="n">res</span><span class="o">,</span> <span class="kt">int</span> <span class="n">n</span><span class="o">)</span> <span class="o">{</span>
        <span class="kt">long</span><span class="o">[][]</span> <span class="n">matrix</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">long</span><span class="o">[</span><span class="n">n</span><span class="o">][</span><span class="n">n</span><span class="o">];</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">matrix</span><span class="o">.</span><span class="na">length</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> <span class="k">return</span> <span class="k">new</span> <span class="kt">long</span><span class="o">[</span><span class="mi">0</span><span class="o">][</span><span class="mi">0</span><span class="o">];</span>
        <span class="kt">int</span> <span class="n">l</span> <span class="o">=</span> <span class="mi">0</span><span class="o">,</span> <span class="n">r</span> <span class="o">=</span> <span class="n">matrix</span><span class="o">[</span><span class="mi">0</span><span class="o">].</span><span class="na">length</span> <span class="o">-</span> <span class="mi">1</span><span class="o">,</span> <span class="n">t</span> <span class="o">=</span> <span class="mi">0</span><span class="o">,</span> <span class="n">b</span> <span class="o">=</span> <span class="n">matrix</span><span class="o">.</span><span class="na">length</span> <span class="o">-</span> <span class="mi">1</span><span class="o">,</span> <span class="n">x</span> <span class="o">=</span> <span class="n">res</span><span class="o">.</span><span class="na">length</span> <span class="o">-</span> <span class="mi">1</span><span class="o">;</span>
        <span class="k">while</span> <span class="o">(</span><span class="kc">true</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">l</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;=</span> <span class="n">r</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="n">matrix</span><span class="o">[</span><span class="n">t</span><span class="o">][</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="n">res</span><span class="o">[</span><span class="n">x</span><span class="o">--];</span>
            <span class="k">if</span> <span class="o">(++</span><span class="n">t</span> <span class="o">&gt;</span> <span class="n">b</span><span class="o">)</span> <span class="k">break</span><span class="o">;</span>
            <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">t</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;=</span> <span class="n">b</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="n">matrix</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="n">r</span><span class="o">]</span> <span class="o">=</span> <span class="n">res</span><span class="o">[</span><span class="n">x</span><span class="o">--];</span>
            <span class="k">if</span> <span class="o">(</span><span class="n">l</span> <span class="o">&gt;</span> <span class="o">--</span><span class="n">r</span><span class="o">)</span> <span class="k">break</span><span class="o">;</span>
            <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">r</span><span class="o">;</span> <span class="n">i</span> <span class="o">&gt;=</span> <span class="n">l</span><span class="o">;</span> <span class="n">i</span><span class="o">--)</span> <span class="n">matrix</span><span class="o">[</span><span class="n">b</span><span class="o">][</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="n">res</span><span class="o">[</span><span class="n">x</span><span class="o">--];</span>
            <span class="k">if</span> <span class="o">(</span><span class="n">t</span> <span class="o">&gt;</span> <span class="o">--</span><span class="n">b</span><span class="o">)</span> <span class="k">break</span><span class="o">;</span>
            <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">b</span><span class="o">;</span> <span class="n">i</span> <span class="o">&gt;=</span> <span class="n">t</span><span class="o">;</span> <span class="n">i</span><span class="o">--)</span> <span class="n">matrix</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="n">l</span><span class="o">]</span> <span class="o">=</span> <span class="n">res</span><span class="o">[</span><span class="n">x</span><span class="o">--];</span>
            <span class="k">if</span> <span class="o">(++</span><span class="n">l</span> <span class="o">&gt;</span> <span class="n">r</span><span class="o">)</span> <span class="k">break</span><span class="o">;</span>
        <span class="o">}</span>
        <span class="k">return</span> <span class="n">matrix</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">Scanner</span> <span class="n">sc</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Scanner</span><span class="o">(</span><span class="nc">System</span><span class="o">.</span><span class="na">in</span><span class="o">);</span>
        <span class="kt">int</span> <span class="n">n</span> <span class="o">=</span> <span class="n">sc</span><span class="o">.</span><span class="na">nextInt</span><span class="o">();</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">n</span> <span class="o">&lt;=</span> <span class="mi">1</span><span class="o">)</span> <span class="o">{</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">n</span><span class="o">);</span>
            <span class="k">return</span><span class="o">;</span>
        <span class="o">}</span>
        <span class="c1">// 顺时针填</span>
        <span class="kt">long</span><span class="o">[]</span> <span class="n">f</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">long</span><span class="o">[</span><span class="n">n</span> <span class="o">*</span> <span class="n">n</span><span class="o">];</span>
        <span class="n">f</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span>
        <span class="n">f</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span>
        <span class="n">f</span><span class="o">[</span><span class="mi">2</span><span class="o">]</span> <span class="o">=</span> <span class="mi">2</span><span class="o">;</span>
        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">3</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span> <span class="o">*</span> <span class="n">n</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="n">f</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="n">f</span><span class="o">[</span><span class="n">i</span> <span class="o">-</span> <span class="mi">1</span><span class="o">]</span> <span class="o">+</span> <span class="n">f</span><span class="o">[</span><span class="n">i</span> <span class="o">-</span> <span class="mi">2</span><span class="o">];</span>
        <span class="o">}</span>
        <span class="c1">// 逆时针填回去</span>
        <span class="kt">long</span><span class="o">[][]</span> <span class="n">ma</span> <span class="o">=</span> <span class="n">spiralOrder</span><span class="o">(</span><span class="n">f</span><span class="o">,</span> <span class="n">n</span><span class="o">);</span>
        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">ma</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">ma</span><span class="o">[</span><span class="n">i</span><span class="o">].</span><span class="na">length</span><span class="o">;</span> <span class="n">j</span><span class="o">++)</span> <span class="o">{</span>
                <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="n">ma</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="n">j</span><span class="o">]</span> <span class="o">+</span> <span class="s">" "</span><span class="o">);</span>
            <span class="o">}</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">();</span>
        <span class="o">}</span>
    <span class="o">}</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h3 id="熟悉的ab">熟悉的A+B</h3>

<p>设a,b,c是0到9之间的整数（其中a,b,c互不相同），其中abc和acc是两个不同的三位数，现给定一正整数n，问有多少对abc和acc能满足abc+acc=n（a!=0）？</p>

<p>输入描述：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre><span class="n">一个正整数n</span><span class="err">（</span><span class="mi">100</span><span class="o">&lt;</span><span class="n">n</span><span class="o">&lt;</span><span class="mi">2000</span><span class="err">）</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>输出描述：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
</pre></td><td class="rouge-code"><pre><span class="n">第一行输出有多少对满足要求的数字</span><span class="err">。</span>
<span class="n">接下来每一行输出一对abc和acc</span><span class="err">，</span><span class="n">以空格分隔</span><span class="err">。</span><span class="n">如果没有一对abc和acc的话</span><span class="err">。</span><span class="n">则直接输出0即可</span><span class="err">。</span><span class="n">如果有多对</span><span class="err">，</span><span class="n">请按照abc升序的次序输出</span><span class="err">。</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>样例输入</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
</pre></td><td class="rouge-code"><pre><span class="mi">1068</span>
<span class="mi">1</span>
<span class="mi">524</span> <span class="mi">544</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h4 id="答案-3">答案</h4>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
</pre></td><td class="rouge-code"><pre><span class="kn">import</span> <span class="nn">java.util.*</span><span class="o">;</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Main1</span> <span class="o">{</span>


    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>


<span class="c1">//        Scanner sc = new Scanner(System.in);</span>
        <span class="kt">int</span> <span class="n">cnt</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
        <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">n</span> <span class="o">=</span> <span class="mi">100</span><span class="o">;</span> <span class="n">n</span> <span class="o">&lt;=</span><span class="mi">1000</span><span class="o">;</span> <span class="o">++</span><span class="n">n</span><span class="o">)</span> <span class="o">{</span>


            <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">100</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">999</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
                <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">100</span><span class="o">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="mi">999</span><span class="o">;</span> <span class="n">j</span><span class="o">++)</span> <span class="o">{</span>
                    <span class="k">if</span> <span class="o">(</span><span class="n">i</span> <span class="o">+</span> <span class="n">j</span> <span class="o">==</span> <span class="n">n</span> <span class="o">&amp;&amp;</span> <span class="n">i</span> <span class="o">!=</span> <span class="n">n</span><span class="o">)</span> <span class="o">{</span>
                        <span class="kt">boolean</span> <span class="n">flag</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
                        <span class="nc">String</span> <span class="n">a</span> <span class="o">=</span> <span class="nc">String</span><span class="o">.</span><span class="na">valueOf</span><span class="o">(</span><span class="n">i</span><span class="o">);</span>
                        <span class="k">if</span> <span class="o">(</span><span class="n">a</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="mi">0</span><span class="o">)</span> <span class="o">==</span> <span class="n">a</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="mi">1</span><span class="o">)</span> <span class="o">||</span> <span class="n">a</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="mi">0</span><span class="o">)</span> <span class="o">==</span> <span class="n">a</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="mi">2</span><span class="o">)</span> <span class="o">||</span> <span class="n">a</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="mi">2</span><span class="o">)</span> <span class="o">==</span> <span class="n">a</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="mi">1</span><span class="o">))</span> <span class="o">{</span>
                            <span class="n">flag</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>
                            <span class="k">continue</span><span class="o">;</span>
                        <span class="o">}</span>
                        <span class="nc">String</span> <span class="n">b</span> <span class="o">=</span> <span class="nc">String</span><span class="o">.</span><span class="na">valueOf</span><span class="o">(</span><span class="n">j</span><span class="o">);</span>
                        <span class="k">if</span> <span class="o">(</span><span class="n">b</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="mi">0</span><span class="o">)</span> <span class="o">==</span> <span class="n">b</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="mi">1</span><span class="o">)</span> <span class="o">||</span> <span class="n">b</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="mi">0</span><span class="o">)</span> <span class="o">==</span> <span class="n">b</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="mi">2</span><span class="o">)</span> <span class="o">||</span> <span class="n">b</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="mi">2</span><span class="o">)</span> <span class="o">!=</span> <span class="n">b</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="mi">1</span><span class="o">))</span> <span class="o">{</span>
                            <span class="n">flag</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>
                            <span class="k">continue</span><span class="o">;</span>
                        <span class="o">}</span>

                        <span class="kt">char</span><span class="o">[]</span> <span class="nc">Achars</span> <span class="o">=</span> <span class="n">a</span><span class="o">.</span><span class="na">toCharArray</span><span class="o">();</span>
                        <span class="kt">char</span><span class="o">[]</span> <span class="nc">Bchars</span> <span class="o">=</span> <span class="n">b</span><span class="o">.</span><span class="na">toCharArray</span><span class="o">();</span>
                        <span class="k">if</span> <span class="o">(</span><span class="nc">Achars</span><span class="o">[</span><span class="mi">2</span><span class="o">]</span> <span class="o">!=</span> <span class="nc">Bchars</span><span class="o">[</span><span class="mi">2</span><span class="o">]</span> <span class="o">||</span> <span class="nc">Achars</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span> <span class="o">==</span> <span class="nc">Bchars</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span> <span class="o">||</span> <span class="nc">Achars</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="o">!=</span> <span class="nc">Bchars</span><span class="o">[</span><span class="mi">0</span><span class="o">])</span> <span class="o">{</span>
                            <span class="n">flag</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>
                        <span class="o">}</span>

                        <span class="k">if</span> <span class="o">(</span><span class="n">flag</span><span class="o">)</span> <span class="o">{</span>
<span class="c1">//                            System.out.println(i + " " + j);</span>
                            <span class="n">cnt</span><span class="o">++;</span>
                        <span class="o">}</span>
                    <span class="o">}</span>
                <span class="o">}</span>
            <span class="o">}</span>
        <span class="o">}</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">cnt</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h2 id="阿里巴巴-2020-8-24">阿里巴巴-2020-8-24</h2>

<h3 id="x和y的最大乘积">x和y的最大乘积</h3>

<p>小强想要从[1,A]中选出一个整数x，从[1,B]中选出 一个整数y，使得满足x/y = a/b的同时且x和y的乘积最大。如果不存在这样的x和y，请输出“0 0”</p>

<p>输入描述：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
</pre></td><td class="rouge-code"><pre><span class="n">输入一行包含四个整数A</span><span class="o">,</span><span class="no">B</span><span class="o">,</span><span class="n">a和b</span>
<span class="mi">1</span><span class="o">&lt;=</span><span class="no">A</span><span class="o">,</span><span class="no">B</span><span class="o">,</span><span class="n">a</span><span class="o">,</span><span class="n">b</span><span class="o">&lt;=</span><span class="mi">2</span><span class="n">e9</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>输出描述：输出两个整数表示满足条件的x和y，若不存在，则输出“0 0”</p>

<p>测试样例：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
</pre></td><td class="rouge-code"><pre><span class="mi">1</span> <span class="mi">1</span> <span class="mi">2</span> <span class="mi">1</span>
<span class="mi">0</span> <span class="mi">0</span>
  
<span class="mi">1000</span> <span class="mi">500</span> <span class="mi">4</span> <span class="mi">2</span>
<span class="mi">1000</span> <span class="mi">500</span>

<span class="mi">1000</span> <span class="mi">500</span> <span class="mi">3</span> <span class="mi">1</span>
<span class="mi">999</span> <span class="mi">333</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h4 id="答案-4">答案</h4>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
</pre></td><td class="rouge-code"><pre><span class="mi">1</span><span class="o">.</span> <span class="n">先将a和b按比例缩小到最小</span><span class="err">。</span><span class="n">gcd算法</span>
<span class="mi">2</span><span class="o">.</span> <span class="n">再找出区间</span><span class="o">[</span><span class="mi">1</span><span class="o">,</span><span class="no">A</span><span class="o">]</span><span class="n">中a的最大倍数</span><span class="err">，</span><span class="n">即</span>
		<span class="n">argmax</span><span class="o">(</span><span class="n">a</span> <span class="o">*</span> <span class="n">n</span> <span class="o">&lt;=</span> <span class="no">A</span><span class="o">)</span>
  		<span class="n">n</span>
		<span class="n">同理再找出区间</span><span class="o">[</span><span class="mi">1</span><span class="o">,</span><span class="no">B</span><span class="o">]</span><span class="n">中b的最大倍数</span>
		<span class="n">argmax</span><span class="o">(</span><span class="n">b</span> <span class="o">*</span> <span class="n">m</span> <span class="o">&lt;=</span> <span class="no">B</span><span class="o">)</span>
		  <span class="n">m</span>
<span class="mi">3</span><span class="o">.</span> <span class="n">求</span> <span class="n">p</span> <span class="o">=</span> <span class="n">min</span><span class="o">(</span><span class="n">n</span><span class="o">,</span><span class="n">m</span><span class="o">)</span><span class="err">，</span><span class="n">此时p为a和b在满足成比例的情况下</span><span class="err">，</span><span class="n">能够扩大的最大倍数</span>
		<span class="n">x</span> <span class="o">=</span> <span class="n">a</span> <span class="o">*</span> <span class="n">p</span>
		<span class="n">y</span> <span class="o">=</span> <span class="n">b</span> <span class="o">*</span> <span class="n">p</span>
<span class="mi">4</span><span class="o">.</span> <span class="n">x</span><span class="o">,</span><span class="n">y即为区间</span><span class="o">[</span><span class="mi">1</span><span class="o">,</span><span class="no">A</span><span class="o">]</span><span class="n">和</span><span class="o">[</span><span class="mi">1</span><span class="o">,</span><span class="no">B</span><span class="o">]</span><span class="n">内能取到的最大值</span><span class="err">，</span><span class="n">乘积也自然最大</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
</pre></td><td class="rouge-code"><pre><span class="kd">public</span> <span class="kd">class</span> <span class="nc">solution</span> <span class="o">{</span>

    <span class="kd">static</span> <span class="kt">int</span> <span class="no">A</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span>
    <span class="kd">static</span> <span class="kt">int</span> <span class="no">B</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span>
    <span class="kd">static</span> <span class="kt">int</span> <span class="n">a</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span>
    <span class="kd">static</span> <span class="kt">int</span> <span class="n">b</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span>
    <span class="kd">static</span> <span class="kt">int</span> <span class="n">x</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span>
    <span class="kd">static</span> <span class="kt">int</span> <span class="n">y</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span>

  	<span class="c1">//找出a,b的最大公约数</span>
    <span class="kd">public</span>  <span class="kd">static</span> <span class="kt">int</span> <span class="nf">gcd</span><span class="o">(){</span>
        <span class="kt">int</span> <span class="n">r</span><span class="o">;</span>
        <span class="k">while</span> <span class="o">(</span><span class="n">b</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="o">){</span>
            <span class="n">r</span> <span class="o">=</span> <span class="n">a</span><span class="o">%</span><span class="n">b</span><span class="o">;</span>
            <span class="n">a</span> <span class="o">=</span> <span class="n">b</span><span class="o">;</span>
            <span class="n">b</span> <span class="o">=</span><span class="n">r</span><span class="o">;</span>
        <span class="o">}</span>
        <span class="k">return</span> <span class="n">a</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">exec</span><span class="o">(){</span>
        <span class="kt">int</span> <span class="n">n</span><span class="o">;</span>
      	<span class="c1">// A/a 表示在[1,A]范围内，a的最大倍数，B/b表示在[1,B]范围内，b的最大倍数</span>
      	<span class="c1">// 二者取最小值，就是a和b能扩大的最大倍数；若取了最大值，a或b必有一者会超出区间限制</span>
        <span class="n">n</span> <span class="o">=</span> <span class="nc">Math</span><span class="o">.</span><span class="na">min</span><span class="o">(</span> <span class="no">A</span><span class="o">/</span><span class="n">a</span><span class="o">,</span> <span class="no">B</span><span class="o">/</span><span class="n">b</span><span class="o">);</span>
      	<span class="c1">//扩大</span>
        <span class="n">x</span> <span class="o">=</span> <span class="n">n</span> <span class="o">*</span> <span class="n">a</span><span class="o">;</span>
        <span class="n">y</span> <span class="o">=</span> <span class="n">n</span> <span class="o">*</span> <span class="n">b</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">Scanner</span> <span class="n">sc</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Scanner</span><span class="o">(</span><span class="nc">System</span><span class="o">.</span><span class="na">in</span><span class="o">);</span>
        <span class="no">A</span> <span class="o">=</span> <span class="n">sc</span><span class="o">.</span><span class="na">nextInt</span><span class="o">();</span>
        <span class="no">B</span> <span class="o">=</span> <span class="n">sc</span><span class="o">.</span><span class="na">nextInt</span><span class="o">();</span>
        <span class="n">a</span> <span class="o">=</span> <span class="n">sc</span><span class="o">.</span><span class="na">nextInt</span><span class="o">();</span>
        <span class="n">b</span> <span class="o">=</span> <span class="n">sc</span><span class="o">.</span><span class="na">nextInt</span><span class="o">();</span>
        <span class="kt">int</span> <span class="n">g</span> <span class="o">=</span> <span class="n">gcd</span><span class="o">();</span>
      	<span class="c1">//比例缩小a,b的值</span>
        <span class="n">a</span> <span class="o">=</span> <span class="n">a</span><span class="o">/</span><span class="n">g</span><span class="o">;</span>
        <span class="n">b</span> <span class="o">=</span> <span class="n">b</span><span class="o">/</span><span class="n">g</span><span class="o">;</span> 
        <span class="n">exec</span><span class="o">(</span><span class="no">A</span><span class="o">,</span><span class="no">B</span><span class="o">,</span><span class="n">a</span><span class="o">,</span><span class="n">b</span><span class="o">);</span>

        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">x</span> <span class="o">+</span> <span class="s">" "</span> <span class="o">+</span><span class="n">y</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h4 id="gcd算法">gcd算法</h4>

<p>最大公约数(GCD, Greatest Common Divisor，为简便下文都使用GCD表示最大公约数)：指某几个整数共有约数中最大的一个。</p>

<ol>
  <li>辗转相除法，又称欧几里得算法</li>
</ol>

<p>定理：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre><span class="n">gcd</span><span class="o">(</span><span class="n">a</span><span class="o">,</span><span class="n">b</span><span class="o">)</span> <span class="o">=</span> <span class="n">acd</span><span class="o">(</span><span class="n">b</span><span class="o">,</span><span class="n">a</span> <span class="n">mod</span> <span class="n">b</span><span class="o">)</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>证明：</p>

<div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
</pre></td><td class="rouge-code"><pre>(1)充分性：
设g是a,b的公约数，则a,b可由g来表示：	a = xg, b = yg (x,y为整数)

又a可由b表示（任意一个数都可以由另一个数来表示）：
a = kb + r (k为整数，r为a除以b所得余数)=&gt; r = a - kb = xg - kyg = (x - ky)g
即，g也是r的约数。这样，g就是(b, r)即(b, a mod b)的公约数。<span class="sb">


</span>(2)必要性：
设g是(b, a mod b)的公约数，类似于(1)，同样可以推出g也是(a, b)的公约数。
</pre></td></tr></tbody></table></code></pre></div></div>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
</pre></td><td class="rouge-code"><pre><span class="n">辗转相除的两种写法</span>
      <span class="c1">// 辗转相除法（递归写法）</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">int</span> <span class="nf">gcd_division_recursive</span><span class="o">(</span><span class="kt">int</span> <span class="n">a</span><span class="o">,</span> <span class="kt">int</span> <span class="n">b</span><span class="o">){</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">b</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">return</span> <span class="n">a</span><span class="o">;</span>
        <span class="o">}</span>
        <span class="k">return</span> <span class="nf">gcd_division_recursive</span><span class="o">(</span><span class="n">b</span><span class="o">,</span> <span class="n">a</span> <span class="o">%</span> <span class="n">b</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="c1">// 辗转相除法（迭代写法）</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">int</span> <span class="nf">gcd_division_iteration</span><span class="o">(</span><span class="kt">int</span> <span class="n">a</span><span class="o">,</span> <span class="kt">int</span> <span class="n">b</span><span class="o">){</span>
        <span class="k">while</span><span class="o">(</span><span class="n">b</span> <span class="o">!=</span> <span class="mi">0</span><span class="o">){</span><span class="c1">// 为什么用b判断呢？因为b就是用来存a%b的，即上面算法步骤里的r的</span>
            <span class="kt">int</span> <span class="n">t</span> <span class="o">=</span> <span class="n">b</span><span class="o">;</span>
            <span class="n">b</span> <span class="o">=</span> <span class="n">a</span> <span class="o">%</span> <span class="n">b</span><span class="o">;</span>
            <span class="n">a</span> <span class="o">=</span> <span class="n">t</span><span class="o">;</span>
        <span class="o">}</span>
        <span class="k">return</span> <span class="n">a</span><span class="o">;</span>
    <span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>其实，只要知道了a,b的最大公约数，那最小公倍数不就是a * b / gcd(a, b)吗？</p>

<p>参考链接：</p>

<p><a href="https://www.jianshu.com/p/25d0ca88a4a1">最大公约数GCD的三种求法</a></p>

<h2 id="京东-2020-8-27">京东-2020-8-27</h2>

<h2 id="逆序五进制">逆序五进制</h2>

<p>编写一个程序，首先将一个十进制正整数逆序【需要去掉前导0】，然后转换成五进制正整数，最后输出该五进制正整数。</p>

<p>输入描述</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
</pre></td><td class="rouge-code"><pre><span class="n">单组输入</span><span class="err">。</span>
<span class="n">每组测试数据的输入占一行</span><span class="err">，</span><span class="n">输入一个十进制正整数n</span><span class="err">。（</span><span class="n">n</span> <span class="o">&lt;=</span> <span class="mi">100000</span><span class="err">）</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>输出描述</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre><span class="n">每组测试数据的输出占一行</span><span class="err">，</span><span class="n">输出转换后所得的五进制正整数</span><span class="err">。</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>样例：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
</pre></td><td class="rouge-code"><pre><span class="mi">1000</span>	<span class="mi">1</span>
<span class="mi">77267</span>	<span class="mi">4420102</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
</pre></td><td class="rouge-code"><pre><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Main</span> <span class="o">{</span>
    
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">Scanner</span> <span class="n">sc</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Scanner</span><span class="o">(</span><span class="nc">System</span><span class="o">.</span><span class="na">in</span><span class="o">);</span>
        <span class="kt">int</span> <span class="n">n</span> <span class="o">=</span> <span class="n">sc</span><span class="o">.</span><span class="na">nextInt</span><span class="o">();</span>
        <span class="nc">StringBuilder</span> <span class="n">sb</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">StringBuilder</span><span class="o">(</span><span class="nc">String</span><span class="o">.</span><span class="na">valueOf</span><span class="o">(</span><span class="n">n</span><span class="o">));</span>
        <span class="kt">int</span> <span class="n">n1</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">sb</span><span class="o">.</span><span class="na">reverse</span><span class="o">().</span><span class="na">toString</span><span class="o">());</span>
        <span class="n">sb</span><span class="o">.</span><span class="na">delete</span><span class="o">(</span><span class="mi">0</span><span class="o">,</span> <span class="n">sb</span><span class="o">.</span><span class="na">length</span><span class="o">());</span>
        <span class="k">while</span> <span class="o">(</span><span class="n">n1</span> <span class="o">!=</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">sb</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="n">n1</span> <span class="o">%</span> <span class="mi">5</span><span class="o">);</span>
            <span class="n">n1</span> <span class="o">/=</span> <span class="mi">5</span><span class="o">;</span>
        <span class="o">}</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="nc">Integer</span><span class="o">.</span><span class="na">valueOf</span><span class="o">(</span><span class="n">sb</span><span class="o">.</span><span class="na">reverse</span><span class="o">().</span><span class="na">toString</span><span class="o">()));</span>
    <span class="o">}</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>还有一题智障题，就不贴了。</p>
:ET